[{"name":"vk-terminal","main":"./lib/vk-terminal","version":"3.0.1","description":"A terminal package for Atom, complete with themes, API and more for PlatformIO IDE. Fork of terminal-plus.","author":"Jeremy Ebneyamin","keywords":["vk","terminal-plus","terminal","iterm","panel","pty","tty","xterm","iterm","iterm2","console","powershell"],"contributors":[{"name":"Ivan Kravets","email":"me@ikravets.com","url":"http://platformio.org"},{"name":"Dmytro Kyrychuk","email":"dmytro.kyrychuck@gmail.com","url":"http://platformio.org"}],"homepage":"https://atom.io/packages/vk-terminal","repository":"https://github.com/atom-repo/vk-terminal","license":"MIT","engines":{"atom":">=1.12.2 <2.0.0"},"dependencies":{"atom-space-pen-views":"^2.1.0","pty.js":"https://github.com/platformio/pty.js/tarball/prebuilt","term.js":"https://github.com/jeremyramin/term.js/tarball/master","underscore":"^1.8.3"},"activationHooks":["core:loaded-shell-environment"],"consumedServices":{"status-bar":{"versions":{"^1.0.0":"consumeStatusBar"}}},"providedServices":{"platformioIDETerminal":{"description":"PlatformIO IDE Terminal API","versions":{"1.1.0":"providePlatformIOIDETerminal"}},"runInTerminal":{"description":"Deprecated API for PlatformIO IDE 1.0","versions":{"0.14.5":"provideRunInTerminal"}}},"readme":"# VK Terminal\n\n __     ___  __  _____                   _             _\n \\ \\   / / |/ / |_   _|__ _ __ _ __ ___ (_)_ __   __ _| |\n  \\ \\ / /| ' /    | |/ _ \\ '__| '_ ` _ \\| | '_ \\ / _` | |\n   \\ V / | . \\    | |  __/ |  | | | | | | | | | | (_| | |\n    \\_/  |_|\\_\\   |_|\\___|_|  |_| |_| |_|_|_| |_|\\__,_|_|\n\n\nA terminal package for Atom, complete with themes, API and more for [PlatformIO IDE](http://platformio.org/#!/vk).\n\n![demo](https://github.com/jeremyramin/terminal-plus/raw/master/resources/demo.gif)\n\n*[Nucleus Dark UI](https://atom.io/themes/nucleus-dark-ui) with [Atom Material Syntax](https://atom.io/themes/atom-material-syntax) and our Homebrew theme.*\n\n## Install\nReady to install?\n\nYou can install via apm: `apm install vk-terminal`\n\nOr navigate to the install tab in Atom’s settings view, and search for `vk-terminal`.\n\n## Usage\n\n`vk-terminal` stays in the bottom of your editor while you work.\n\nClick on a status icon to toggle that terminal (or ``ctrl-` ``). Right click the status icon for a list of available commands. From the right-click menu you can color code the status icon as well as hide or close the terminal instance.\n\n### Terminal\nYou can open the last active terminal with the `vk-terminal:toggle` command (Default:`` ctrl-` ``).  If no terminal instances are available, then a new one will be created. The same toggle command is used to hide the currently active terminal.\n\nFrom there you can begin typing into the terminal. By default the terminal will change directory into the project folder if possible. The default working directory can be changed in the settings to the home directory or to the active file directory.\n\n[See available commands below](#commands).\n\n## Features\n\n### Full Terminal\nEvery terminal is loaded with your system’s default initialization files. This ensures that you have access to the same commands and aliases as you would in your standard terminal.\n\n### Themes\nThe terminal is preloaded with several themes that you can choose from. Not satisfied?  \nUse the following template in your stylesheet:\n```css\n.vk-terminal .xterm {\n  background-color: ;\n  color: ;\n\n  ::selection {\n    background-color: ;\n  }\n\n  .terminal-cursor {\n    background-color: ;\n  }\n}\n```\n\n### Process Titles\nBy hovering over the terminal status icon, you can see which command process is currently running in the terminal.\n\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/terminal_title.png)\n\n### Terminal Naming\nNeed a faster way to figure out which terminal is which? Name your status icons!\n\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/status-icon_rename.png)\n\nAvailable via the status icon context menu.\n\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/status-icon_rename-dialog.png)\n\n### Color Coding\nColor code your status icons!\n\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/status-icon_color_coding.png)\n\nThe colors are customizable in the settings, however the color names remain the same in the context menu.\n\n### Sorting\nOrganize your open terminal instances by dragging and dropping them.\n\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/sorting.gif)\n\n### Resizable\nYou can resize the view vertically, or just maximize it with the maximize button.\n\n### Working Directory\nYou can set the default working directory for new terminals. By default this will be the project folder.\n\n### File Dropping\nDropping a file on the terminal will insert the file path into the input. This works with external files, tabs from the Atom tab-view, and entries from the Atom tree-view.\n\n### Insert Selected Text\nInsert and run selected text from your text editor by running the `vk-terminal:insert-selected-text` command (`ctrl-enter`).\n\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/insert_selected_text.gif)\n\nIf you have text selected, it will insert your selected text into the active terminal and run it.  \nIf you don't have text selected it, will run the text on the line where your cursor is then proceed to the next line.\n\n### Quick Command Insert\nQuickly insert a command to your active terminal by executing the `vk-terminal:insert-text` command.\n\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/insert_text.png)\n\nA dialog will pop up asking for the input to insert. If you have the `Run Inserted Text` option enabled in the settings (default is false), vk-terminal will automatically run the command for you.\n\n#### Support for Special Keys\nSupport for IME, dead keys and other key combinations via the `Insert Text` dialog box. Just click the keyboard button in the top left of the terminal or set up a keymap to the `vk-terminal:insert-text` command.\n\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/special_keys.gif)\n\nNote: Make sure you have the `Run Inserted Command` toggle off otherwise it will run your inserted text.\n\n### Map Terminal To\nMap your terminals to each file or folder you are working on for automatic terminal switching.\n\n#### File\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/map_terminals_to_file.gif)\n\n#### Folder\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/map_terminals_to_folder.gif)\n\nToggling the `Auto Open a New Terminal (For Terminal Mapping)` option will have the mapping create a new terminal automatically for files and folders that don't have a terminal. The toggle is located right under the `Map Terminals To` option.\n\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/map_terminals_to_auto_open.gif)\n\n## Commands\n| Command | Action | Default Keybind |\n|---------|--------|:-----------------:|\n| vk-terminal:new | Create a new terminal instance. | `ctrl-shift-t`<br>or<br>`cmd-shift-t` |\n| vk-terminal:toggle | Toggle the last active terminal instance.<br>**Note:** This will create a new terminal if it needs to. | `` ctrl-` ``<br>(Control + Backtick) |\n| vk-terminal:prev | Switch to the terminal left of the last active terminal. | `ctrl-shift-j`<br>or<br>`cmd-shift-j` |\n| vk-terminal:next | Switch to the terminal right of the last active terminal. | `ctrl-shift-k`<br>or<br>`cmd-shift-k` |\n| vk-terminal:insert-selected-text | Run the selected text as a command in the active terminal. | `ctrl-enter` |\n| vk-terminal:insert-text | Bring up an input box for using IME and special keys. | –––––––––––– |\n| vk-terminal:fullscreen | Toggle fullscreen for active terminal. | –––––––––––– |\n| vk-terminal:close | Close the active terminal. | `ctrl-shift-x`<br>or<br>`cmd-shift-x` |\n| vk-terminal:close-all | Close all terminals. | –––––––––––– |\n| vk-terminal:rename | Rename the active terminal. | –––––––––––– |\n\n---\nA fork of [jeremyramin/terminal-plus](https://github.com/jeremyramin/terminal-plus).\n","downloads":1432,"stargazers_count":3},{"name":"terminal-tab","main":"./lib/main","version":"0.5.7","description":"A simple terminal for panes and docks.","author":{"name":"Justin Mecham","email":"justin@mecham.me","url":"http://justin.mecham.me"},"private":true,"scripts":{"test":"apm test"},"keywords":["command","console","prompt","pty","terminal","term","tty","xterm"],"homepage":"https://atom.io/packages/terminal-tab","repository":"https://github.com/jsmecham/atom-terminal-tab","license":"MIT","engines":{"atom":">=1.19.0 <2.0.0"},"dependencies":{"etch":"^0.12.7","node-pty-prebuilt":"^0.7.3","rgb-hex":"^2.1.0","xterm":"^3.1.0"},"deserializers":{"TerminalSession":"deserializeTerminalSession"},"eslintConfig":{"env":{"browser":true,"es6":true,"jasmine":true,"node":true},"globals":{"atom":true},"extends":"eslint:recommended","parserOptions":{"ecmaFeatures":{"jsx":true},"sourceType":"module"},"rules":{"indent":["error",2],"linebreak-style":["error","unix"],"quotes":["error","single"],"semi":["error","always"]}},"readme":"# Terminal for Atom\n\nA simple terminal for Atom that is based on the excellent [Xterm.js](http://xtermjs.org) and [node-pty](https://github.com/Tyriar/node-pty) projects. Works best with Atom 1.17 and later with support for Docks.\n\n## Demo\n\n![Terminal Demo](https://raw.githubusercontent.com/jsmecham/atom-terminal-tab/master/demo.gif)\n","downloads":13603,"stargazers_count":46},{"name":"terminal-plus","main":"./lib/terminal-plus","version":"0.14.5","description":"A terminal package for Atom, complete with themes and more.","author":"Jeremy Ebneyamin","keywords":["terminal-plus","terminal","plus","panel","tty"],"homepage":"https://atom.io/packages/terminal-plus","repository":"https://github.com/jeremyramin/terminal-plus","license":"MIT","engines":{"atom":">=1.2.0"},"dependencies":{"atom-space-pen-views":"^2.1.0","pty.js":"git+https://github.com/jeremyramin/pty.js.git#28f2667","term.js":"git+https://github.com/jeremyramin/term.js.git","underscore":"^1.8.3"},"readme":"## Author's Note\n* Please make sure you are on the [latest version of Atom](https://atom.io/releases) before reporting bugs!\n* This package requires that you have the dependencies for node-gyp.  \n[See node-gyp install instructions](https://github.com/nodejs/node-gyp#installation).  \n* You must use a monospaced font in order for the spacing to be right.\n* Having issues on Windows 10? [Try this](https://github.com/jeremyramin/terminal-plus/issues/15#issuecomment-144618245).\n\n# Terminal-Plus\nTerminal-Plus is a terminal package for Atom, complete with themes and more.  \n\n![demo](https://github.com/jeremyramin/terminal-plus/raw/master/resources/demo.gif)\n\n*[Nucleus Dark UI](https://atom.io/themes/nucleus-dark-ui) with [Atom Material Syntax](https://atom.io/themes/atom-material-syntax) and our Homebrew theme.*\n\n## Usage\nTerminal-Plus stays in the bottom of your editor while you work.\n\n### Status Bar\n![status-bar](https://github.com/jeremyramin/terminal-plus/raw/master/resources/status-bar.png)  \nYou can keep track of terminal instances via the status bar. Each terminal has a status icon ( ![status icon](https://github.com/jeremyramin/terminal-plus/raw/master/resources/status-icon.png) ) in the status bar. The ( ![plus-icon](https://github.com/jeremyramin/terminal-plus/raw/master/resources/plus-icon.png) ) button creates a new terminal, while the ( ![red-x](https://github.com/jeremyramin/terminal-plus/raw/master/resources/red-x.png) ) button closes all terminals.\n\nClick on a status icon to toggle that terminal. Right click the status icon for a list of available commands. From the right-click menu you can color code the status icon as well as hide or close the terminal instance.\n\n### Terminal\nYou can open the last active terminal with the `terminal-plus:toggle` command (Default:`` ctrl-` ``).  If no terminal instances are available, then a new one will be created. The same toggle command is used to hide the currently active terminal.\n\nFrom there you can begin typing into the terminal. By default the terminal will change directory into the project folder if possible. The default working directory can be changed in the settings to the home directory or to the active file directory.\n\n[See available commands below](#commands).\n\n## Features\n\n### Full Terminal\nEvery terminal is loaded with your system’s default initialization files. This ensures that you have access to the same commands and aliases as you would in your standard terminal.\n\n### Themes\nThe terminal is preloaded with several themes that you can choose from. Not satisfied?  \nUse the following template in your stylesheet:\n```css\n.terminal-plus .xterm {\n  background-color: ;\n  color: ;\n\n  ::selection {\n    background-color: ;\n  }\n\n  .terminal-cursor {\n    background-color: ;\n  }\n}\n```\n\n### Process Titles\nBy hovering over the terminal status icon, you can see which command process is currently running in the terminal.\n\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/terminal_title.png)\n\n### Terminal Naming\nNeed a faster way to figure out which terminal is which? Name your status icons!\n\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/status-icon_rename.png)\n\nAvailable via the status icon context menu.\n\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/status-icon_rename-dialog.png)\n\n### Color Coding\nColor code your status icons!\n\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/status-icon_color_coding.png)\n\nThe colors are customizable in the settings, however the color names remain the same in the context menu.\n\n### Sorting\nOrganize your open terminal instances by dragging and dropping them.\n\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/sorting.gif)\n\n### Resizable\nYou can resize the view vertically, or just maximize it with the maximize button.\n\n### Working Directory\nYou can set the default working directory for new terminals. By default this will be the project folder.\n\n### File Dropping\nDropping a file on the terminal will insert the file path into the input. This works with external files, tabs from the Atom tab-view, and entries from the Atom tree-view.\n\n### Insert Selected Text\nInsert and run selected text from your text editor by running the `terminal-plus:insert-selected-text` command (`ctrl-enter`).\n\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/insert_selected_text.gif)\n\nIf you have text selected, it will insert your selected text into the active terminal and run it.  \nIf you don't have text selected it, will run the text on the line where your cursor is then proceed to the next line.\n\n### Quick Command Insert\nQuickly insert a command to your active terminal by executing the `terminal-plus:insert-text` command.\n\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/insert_text.png)\n\nA dialog will pop up asking for the input to insert. If you have the `Run Inserted Text` option enabled in the settings (default is false), Terminal-Plus will automatically run the command for you.\n\n#### Support for Special Keys\nSupport for IME, dead keys and other key combinations via the `Insert Text` dialog box. Just click the keyboard button in the top left of the terminal or set up a keymap to the `terminal-plus:insert-text` command.\n\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/special_keys.gif)\n\nNote: Make sure you have the `Run Inserted Command` toggle off otherwise it will run your inserted text.\n\n### Map Terminal To\nMap your terminals to each file or folder you are working on for automatic terminal switching.\n\n#### File\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/map_terminals_to_file.gif)\n\n#### Folder\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/map_terminals_to_folder.gif)\n\nToggling the `Auto Open a New Terminal (For Terminal Mapping)` option will have the mapping create a new terminal automatically for files and folders that don't have a terminal. The toggle is located right under the `Map Terminals To` option.\n\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/map_terminals_to_auto_open.gif)\n\n## Install\nReady to install?\n\nYou can install via apm: `apm install terminal-plus`\n\nOr navigate to the install tab in Atom’s settings view, and search for `terminal-plus`.\n\n## Commands\n| Command | Action | Default Keybind |\n|---------|--------|:-----------------:|\n| terminal-plus:new | Create a new terminal instance. | `ctrl-shift-t`<br>or<br>`cmd-shift-t` |\n| terminal-plus:toggle | Toggle the last active terminal instance.<br>**Note:** This will create a new terminal if it needs to. | `` ctrl-` ``<br>(Control + Backtick) |\n| terminal-plus:prev | Switch to the terminal left of the last active terminal. | `ctrl-shift-j`<br>or<br>`cmd-shift-j` |\n| terminal-plus:next | Switch to the terminal right of the last active terminal. | `ctrl-shift-k`<br>or<br>`cmd-shift-k` |\n| terminal-plus:insert-selected-text | Run the selected text as a command in the active terminal. | `ctrl-enter` |\n| terminal-plus:insert-text | Bring up an input box for using IME and special keys. | –––––––––––– |\n| terminal-plus:close | Close the active terminal. | `ctrl-shift-x`<br>or<br>`cmd-shift-x` |\n| terminal-plus:close-all | Close all terminals. | –––––––––––– |\n| terminal-plus:rename | Rename the active terminal. | –––––––––––– |\n\n## To-Do List\n- [ ] Possibly merge dependencies into Terminal-Plus?\n- [ ] Add support for dead keys and IME input\n- [x] Add support for terminal tabs\n- [x] Add support for automatic directory switching\n- [x] Fix Atom requesting a rebuild after every update\n- [x] Update winpty in pty.js dependency\n- [x] Add support for custom ANSI colors in terminal\n- [x] Fix `ctrl+c` for bash prompts on OS X and Linux\n- [x] Add support for status icon names\n","downloads":513972,"stargazers_count":676},{"name":"terminal-to-text","main":"./lib/terminal-to-text","version":"0.1.0","description":"Converts text copied from the terminal to regular text.","keywords":["terminal","editor"],"activationCommands":{"atom-workspace":"terminal-to-text:convert"},"repository":"https://github.com/gjtorikian/terminal-to-text","license":"MIT","engines":{"atom":">=1.0.0 <2.0.0"},"dependencies":{},"readme":"# terminal-to-text\n\nConverts text copied from the terminal to regular text.\n\n![Converting text](https://cloud.githubusercontent.com/assets/64050/9023383/a1b865c4-384d-11e5-896b-f592d95b2c6e.gif)\n\nRight now this package converts:\n\n* `\\n` into proper line breaks\n* `\\\"` into single quotation marks\n","downloads":586,"stargazers_count":2},{"name":"terminal-tab-plus","main":"./lib/main","version":"0.5.11","description":"A simple terminal for panes and docks.","author":{"name":"Justin Mecham","email":"justin@mecham.me","url":"http://justin.mecham.me"},"private":true,"scripts":{"test":"apm test"},"keywords":["command","console","prompt","pty","terminal","term","tty","xterm"],"repository":"https://github.com/edjubuh/atom-terminal-tab","license":"MIT","engines":{"atom":">=1.19.0 <2.0.0"},"dependencies":{"etch":"^0.12.7","node-pty-prebuilt":"^0.7.3","rgb-hex":"^2.1.0","xterm":"^3.1.0"},"deserializers":{"TerminalSession":"deserializeTerminalSession"},"providedServices":{"terminal-tab":{"description":"Create terminal-tab sessions","versions":{"0.5.0":"provideTerminalSession"}}},"eslintConfig":{"env":{"browser":true,"es6":true,"jasmine":true,"node":true},"globals":{"atom":true},"extends":"eslint:recommended","parserOptions":{"ecmaFeatures":{"jsx":true},"sourceType":"module"},"rules":{"indent":["error",2],"linebreak-style":["error","unix"],"quotes":["error","single"],"semi":["error","always"]}},"readme":"# Terminal for Atom\n\nA simple terminal for Atom that is based on the excellent [Xterm.js](http://xtermjs.org) and [node-pty](https://github.com/Tyriar/node-pty) projects. Works best with Atom 1.17 and later with support for Docks.\n\n## Demo\n\n![Terminal Demo](https://raw.githubusercontent.com/jsmecham/atom-terminal-tab/master/demo.gif)\n","downloads":1799,"stargazers_count":2},{"name":"tokamak-terminal","main":"./lib/tokamak-terminal","version":"10.0.1","description":"A terminal package for Atom, complete with themes, API and more for Tokamak IDE. Fork of terminal-plus.","author":"Mahmut Bulut <vertexclique@gmail.com>","keywords":["tokamak","terminal-plus","terminal","tokamak-terminal","plus","panel","tty"],"homepage":"https://atom.io/packages/tokamak-terminal","repository":"https://github.com/vertexclique/tokamak-terminal","license":"MIT","engines":{"atom":">=1.2.0"},"dependencies":{"atom-space-pen-views":"^2.1.0","pty.js":"https://github.com/platformio/pty.js/tarball/prebuilt","term.js":"https://github.com/jeremyramin/term.js/tarball/master","underscore":"^1.8.3"},"consumedServices":{"status-bar":{"versions":{"^1.0.0":"consumeStatusBar"}}},"providedServices":{"runInTerminal":{"description":"Allow to run commands in terminal.","versions":{"0.14.5":"provideRunInTerminal"}}},"readme":"# токамак Terminal\n**This package is a fork of PlatformIO IDE Terminal package which is fork of terminal-plus**\n\nA terminal package for Atom, complete with themes, API and more for [Tokamak](https://vertexclique.github.io/tokamak/).\n\n![demo](https://github.com/jeremyramin/terminal-plus/raw/master/resources/demo.gif)\n\n*[Nucleus Dark UI](https://atom.io/themes/nucleus-dark-ui) with [Atom Material Syntax](https://atom.io/themes/atom-material-syntax) and our Homebrew theme.*\n\n## Usage\n\n`tokamak-terminal` stays in the bottom of your editor while you work.\n\nClick on a status icon to toggle that terminal (or ``ctrl-` ``). Right click the status icon for a list of available commands. From the right-click menu you can color code the status icon as well as hide or close the terminal instance.\n\n### Terminal\nYou can open the last active terminal with the `tokamak-terminal:toggle` command (Default:`` ctrl-` ``).  If no terminal instances are available, then a new one will be created. The same toggle command is used to hide the currently active terminal.\n\nFrom there you can begin typing into the terminal. By default the terminal will change directory into the project folder if possible. The default working directory can be changed in the settings to the home directory or to the active file directory.\n\n[See available commands below](#commands).\n\n## Features\n\n### Full Terminal\nEvery terminal is loaded with your system’s default initialization files. This ensures that you have access to the same commands and aliases as you would in your standard terminal.\n\n### Themes\nThe terminal is preloaded with several themes that you can choose from. Not satisfied?  \nUse the following template in your stylesheet:\n```css\n.tokamak-terminal .xterm {\n  background-color: ;\n  color: ;\n\n  ::selection {\n    background-color: ;\n  }\n\n  .terminal-cursor {\n    background-color: ;\n  }\n}\n```\n\n### Process Titles\nBy hovering over the terminal status icon, you can see which command process is currently running in the terminal.\n\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/terminal_title.png)\n\n### Terminal Naming\nNeed a faster way to figure out which terminal is which? Name your status icons!\n\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/status-icon_rename.png)\n\nAvailable via the status icon context menu.\n\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/status-icon_rename-dialog.png)\n\n### Color Coding\nColor code your status icons!\n\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/status-icon_color_coding.png)\n\nThe colors are customizable in the settings, however the color names remain the same in the context menu.\n\n### Sorting\nOrganize your open terminal instances by dragging and dropping them.\n\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/sorting.gif)\n\n### Resizable\nYou can resize the view vertically, or just maximize it with the maximize button.\n\n### Working Directory\nYou can set the default working directory for new terminals. By default this will be the project folder.\n\n### File Dropping\nDropping a file on the terminal will insert the file path into the input. This works with external files, tabs from the Atom tab-view, and entries from the Atom tree-view.\n\n### Insert Selected Text\nInsert and run selected text from your text editor by running the `tokamak-terminal:insert-selected-text` command (`ctrl-enter`).\n\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/insert_selected_text.gif)\n\nIf you have text selected, it will insert your selected text into the active terminal and run it.  \nIf you don't have text selected it, will run the text on the line where your cursor is then proceed to the next line.\n\n### Quick Command Insert\nQuickly insert a command to your active terminal by executing the `tokamak-terminal:insert-text` command.\n\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/insert_text.png)\n\nA dialog will pop up asking for the input to insert. If you have the `Run Inserted Text` option enabled in the settings (default is false), tokamak-terminal will automatically run the command for you.\n\n#### Support for Special Keys\nSupport for IME, dead keys and other key combinations via the `Insert Text` dialog box. Just click the keyboard button in the top left of the terminal or set up a keymap to the `tokamak-terminal:insert-text` command.\n\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/special_keys.gif)\n\nNote: Make sure you have the `Run Inserted Command` toggle off otherwise it will run your inserted text.\n\n### Map Terminal To\nMap your terminals to each file or folder you are working on for automatic terminal switching.\n\n#### File\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/map_terminals_to_file.gif)\n\n#### Folder\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/map_terminals_to_folder.gif)\n\nToggling the `Auto Open a New Terminal (For Terminal Mapping)` option will have the mapping create a new terminal automatically for files and folders that don't have a terminal. The toggle is located right under the `Map Terminals To` option.\n\n![](https://github.com/jeremyramin/terminal-plus/raw/master/resources/map_terminals_to_auto_open.gif)\n\n## Install\nReady to install?\n\nYou can install via apm: `apm install tokamak-terminal`\n\nOr navigate to the install tab in Atom’s settings view, and search for `tokamak-terminal`.\n\n## Commands\n| Command | Action | Default Keybind |\n|---------|--------|:-----------------:|\n| tokamak-terminal:new | Create a new terminal instance. | `ctrl-shift-t`<br>or<br>`cmd-shift-t` |\n| tokamak-terminal:toggle | Toggle the last active terminal instance.<br>**Note:** This will create a new terminal if it needs to. | `` ctrl-` ``<br>(Control + Backtick) |\n| tokamak-terminal:prev | Switch to the terminal left of the last active terminal. | `ctrl-shift-j`<br>or<br>`cmd-shift-j` |\n| tokamak-terminal:next | Switch to the terminal right of the last active terminal. | `ctrl-shift-k`<br>or<br>`cmd-shift-k` |\n| tokamak-terminal:insert-selected-text | Run the selected text as a command in the active terminal. | `ctrl-enter` |\n| tokamak-terminal:insert-text | Bring up an input box for using IME and special keys. | –––––––––––– |\n| tokamak-terminal:close | Close the active terminal. | `ctrl-shift-x`<br>or<br>`cmd-shift-x` |\n| tokamak-terminal:close-all | Close all terminals. | –––––––––––– |\n| tokamak-terminal:rename | Rename the active terminal. | –––––––––––– |\n\n---\nA fork of [jeremyramin/terminal-plus](https://github.com/jeremyramin/terminal-plus).\n","downloads":16232,"stargazers_count":13},{"name":"night-terminal","main":"./lib/night-terminal","version":"1.1.1","description":"A minimalistic, monochrome Atom terminal","author":"Saad Quadri","keywords":["PlatformIO","terminal-plus","terminal","iterm","panel","pty","tty","xterm","iterm","iterm2","console","powershell","night"],"contributors":[{"name":"Saad Quadri","email":"saad@saadq.com","url":"http://saadq.com"},{"name":"Ivan Kravets","email":"me@ikravets.com","url":"http://platformio.org"},{"name":"Dmytro Kyrychuk","email":"dmytro.kyrychuck@gmail.com","url":"http://platformio.org"}],"homepage":"https://atom.io/packages/night-terminal","repository":"https://github.com/saadq/night-terminal","license":"MIT","engines":{"atom":">=1.12.2 <2.0.0"},"dependencies":{"atom-space-pen-views":"^2.1.0","pty.js":"https://github.com/platformio/pty.js/tarball/prebuilt","term.js":"https://github.com/jeremyramin/term.js/tarball/master","underscore":"^1.8.3"},"activationHooks":["core:loaded-shell-environment"],"consumedServices":{"status-bar":{"versions":{"^1.0.0":"consumeStatusBar"}}},"providedServices":{"platformioIDETerminal":{"description":"PlatformIO IDE Terminal API","versions":{"1.1.0":"providePlatformIOIDETerminal"}},"runInTerminal":{"description":"Deprecated API for PlatformIO IDE 1.0","versions":{"0.14.5":"provideRunInTerminal"}}},"readme":"![Night Terminal](https://i.imgur.com/XFIPiAD.png)\n\n> A monochrome, minimalistic terminal that goes well with Night UI and Night Syntax.\n\n## Screenshot\n\n![Night Terminal Screenshot](https://i.imgur.com/dwuI268.png)\n\n## Install\n`apm install night-terminal`\n\n## Usage\nYou can toggle the terminal open/close by pressing <kbd>Ctrl</kbd>+<kbd>\\`</kbd>.\n`night-terminal` stays in the bottom of your editor while you work.\n\n## Commands\n| Command | Action | Default Keybind |\n|---------|--------|:-----------------:|\n| night-terminal:new | Create a new terminal instance. | `ctrl-shift-t`<br>or<br>`cmd-shift-t` |\n| night-terminal:toggle | Toggle the last active terminal instance.<br>**Note:** This will create a new terminal if it needs to. | `` ctrl-` ``<br>(Control + Backtick) |\n| night-terminal:prev | Switch to the terminal left of the last active terminal. | `ctrl-shift-j`<br>or<br>`cmd-shift-j` |\n| night-terminal:next | Switch to the terminal right of the last active terminal. | `ctrl-shift-k`<br>or<br>`cmd-shift-k` |\n| night-terminal:insert-selected-text | Run the selected text as a command in the active terminal. | `ctrl-enter` |\n| night-terminal:insert-text | Bring up an input box for using IME and special keys. | –––––––––––– |\n| night-terminal:fullscreen | Toggle fullscreen for active terminal. | –––––––––––– |\n| night-terminal:close | Close the active terminal. | `ctrl-shift-x`<br>or<br>`cmd-shift-x` |\n| night-terminal:close-all | Close all terminals. | –––––––––––– |\n| night-terminal:rename | Rename the active terminal. | –––––––––––– |\n\n## Related Projects\n- [Night UI](https://github.com/saadq/night-ui)\n- [Night Syntax](https://github.com/saadq/night-syntax)\n- [Hyper Night](https://github.com/saadq/hyper-night)\n\n## License\nMIT\n","downloads":400,"stargazers_count":0},{"name":"terminal-like-syntax","theme":"syntax","version":"0.11.0","description":"fork of sgtpepper's syntax to emulate the look and feel of the terminal","keywords":["syntax","theme","terminal"],"repository":"https://github.com/besmith43/terminal-like-syntax","license":"MIT","engines":{"atom":">=1.0.0 <2.0.0"},"readme":"# terminal-like-syntax theme\n\nA Fork of sgtpepper43's terminal theme for atom text editor that works with Atom v1.13 and above.\n\n![A screenshot of your theme](https://github.com/besmith43/terminal-like-syntax/blob/master/Preview.png)\n","downloads":480,"stargazers_count":0},{"name":"ult-terminal","main":"./lib/ult-terminal","version":"0.2.2","description":"UltCombo's Atom terminal.","homepage":"https://github.com/UltCombo/ult-terminal","repository":{"type":"git","url":"https://github.com/UltCombo/ult-terminal"},"bugs":{"url":"https://github.com/UltCombo/ult-terminal/issues"},"license":"MIT","dependencies":{"ansi-html-stream":"^0.0.3","atom-space-pen-views":"^2.0.5","fix-path":"^1.1.0","fs-plus":"^2.8.1","sub-atom":"^1.1.0","tree-kill":"^1.0.0"},"engines":{"atom":">=1.0.0 <2.0.0"},"readme":"# ult-terminal\n\nUltCombo's Atom terminal. Forked from terminal-status.\n\n# Features\n\nHere is a quick overview of the features:\n\n- Command history\n- Clickable file paths and URLs\n- Multiple terminals\n- Preserve screen real estate\n\nSee the details below.\n\n# Command history\n\nPress up/down to navigate the command history.\n\nType the beginning of a command and press up to search the command history. For instance, type `pm2 deploy` and press up to get the most recent command beginning with `pm2 deploy` (e.g. `pm2 deploy ecosystem.json stage`), press up again to get older results that match the initial search (e.g. `pm2 deploy ecosystem.json production`).\n\nStart a command with a space in case you don't want to store it in the command history.\n\n# Clickable file paths and URLs\n\nURLs and email addresses are clickable and open in the default browser or application.\n\nAbsolute file paths that point to inside of the working directory are also clickable and open in Atom.\n\n# Multiple terminals\n\nYou can open multiple terminals and switch between them through the status bar or key bindings.\n\n# Preserve screen real estate\n\nMost developers have wide monitors and tend to limit line lengths in order to keep code optimally readable. Therefore, ult-terminal opens in a panel in the right side of your workspace taking advantage of the unused space instead of consuming your screen's precious vertical real estate.\n\nYou can set the width of the terminal panel to a fixed pixel size in the package settings, or you may also edit your stylesheet to perform more advanced customizations.\n\n# Default keymap\n\n- `shift-enter`: Show/hide current terminal\n- `cmd-shift-e` / `alt-shift-t`: Open new terminal\n- `cmd-shift-j` / `alt-shift-j`: Open next terminal\n- `cmd-shift-k` / `alt-shift-k`: Open prev terminal\n- `cmd-shift-x` / `alt-shift-x`: Destroy current terminal\n\nAll key bindings are available for remapping.\n\n# Known limitations\n\n- Can't write to stdin using the terminal emulator.\n\n# Protip\n\nCheck out the package settings for customizations and tips! :smiley:\n","downloads":2229,"stargazers_count":2},{"name":"terminal-tab-service","main":"./lib/terminal","version":"0.1.4","description":"Provides a service API called terminal-tab for creating simple terminal tabs.","author":{"name":"David Wilson","url":"http://daviwil.com"},"private":true,"scripts":{"test":"apm test"},"keywords":["command","console","prompt","pty","terminal","term","tty","xterm","service","api"],"homepage":"https://atom.io/packages/terminal-tab-service","repository":"https://github.com/daviwil/terminal-tab-service","license":"MIT","engines":{"atom":">=1.16.0 <2.0.0"},"dependencies":{"etch":"^0.12.7","node-pty-prebuilt":"^0.7.3","resize-observer-polyfill":"^1.5.0","xterm":"^2.9.2"},"providedServices":{"terminal-tab":{"description":"Provides a service for creating terminal tabs.","versions":{"0.1.0":"provideTerminalTabService"}}},"eslintConfig":{"env":{"browser":true,"es6":true,"node":true},"extends":"eslint:recommended","globals":{"atom":true},"parserOptions":{"ecmaFeatures":{"jsx":true},"sourceType":"module"},"rules":{"indent":["error",2],"linebreak-style":["error","unix"],"quotes":["error","single"],"semi":["error","always"]}},"readme":"# Terminal Tab Service for Atom\n\nThis package provides a simple terminal pane based on [Xterm.js](https://github.com/xtermjs/xterm.js), primarily to enable an integrated terminal experience for the [ide-powershell](https://github.com/daviwil/ide-powershell)\npackage.\n\nThe code is based on [Justin Mecham's](https://github.com/jsmecham/) [atom-terminal-tab](https://github.com/jsmecham/atom-terminal-tab) package and may eventually be rolled back into that package.\n\n## Disclaimers\n\n**NOTE:** For now, this package isn't meant to be used as a standalone terminal experience.  It's mainly an experiment for providing a simple, rich terminal to be used by other packages that need an integrated terminal.\n\n**BEFORE TAKING A DEPENDENCY** on this package, please file an issue here so we can discuss it.  This package may be transient so I want to make sure nobody gets broken if it gets removed eventually.\n\n## Contributing\n\nContributions are more than welcome, just send a PR!\n\n## License\n\nThis package is released under the [MIT License](LICENSE.md).\n","downloads":4916,"stargazers_count":2},{"name":"run-in-terminal","main":"./lib/run-in-terminal","version":"1.0.1","description":"Run some commands in terminal, or just run terminal","repository":"https://github.com/pohmelie/run-in-terminal","license":"MIT","engines":{"atom":">=1.0.0 <2.0.0"},"dependencies":{},"readme":"# run-in-terminal package\n\nAtom package for executing your current file directly in terminal, or just open the terminal with a specified directory.\n\n## Why?\nSome packages can run terminal «here», some can run scripts not in terminal, but tabs/views/etc. I prefer terminal, so this one can run terminal «here» with any arguments and run scripts or any kind of shell «one-liners».\n\n## Features\n* start terminal here\n* start terminal here and run some command\n* start terminal here and run some command with extra arguments\n* string interpolation with arguments\n* understanding shebang (utf-8 only)\n* launchers — file extension based launcher chooser\n* separate context menus for tabs, tree and editor\n\n## What's new ([changelog](https://github.com/pohmelie/run-in-terminal/blob/master/CHANGELOG.md))\n#### 1.0.1 - Add atom v1.19 support\n* fix [#19](https://github.com/pohmelie/run-in-terminal/issues/19)\n\n## Options\n\n| Field                          |   Type  |                Description                               |        Default value             |                 Example value                   |\n|:------------------------------:|:-------:|:--------------------------------------------------------:|:--------------------------------:|:-----------------------------------------------:|\n| Launch file in terminal command| string  | command to start the terminal and run a program based on filetype or shebang       | operating system dependent       | konsole --noclose --workdir \"{working_directory}\" -e {launcher} \"{file_dir}\" |\n| Save file before run terminal  | boolean | Saves the open file before the terminal is started       | true                             | -                                               |\n| Launch directory in terminal command   | string  | command to start the terminal and open a directory   | operating system dependent   | konsole --noclose --workdir \"{working_directory}\" |\n| List of programs by extension  | string  | comma separated pairs: extension-program                 | your-programs                    | .py python3, .lua lua                           |\n| Use exec cwd                   | boolean | child_process.exec cwd parameter                         | true                             | -                                               |\n| Use shebang                    | boolean | use shebang if available                                 | true                             | -                                               |\n\n\n## Interpolation parameters\n| Parameter           | Description                       |\n|:-------------------:|:---------------------------------:|\n| {file_path}         | path to current file              |\n| {launcher}          | selected program from list or shebang|\n| {args}              | additional (optional) arguments   |\n| {working_directory} | path to current working directory |\n| {project_directory} | path to project's root directory  |\n| {git_directory}     | path to nearest git root directory|\n\n\n## How it works\nIn deep, run-in-terminal uses the node.js child_process.exec function, so exec have cwd (current working directory) argument. But it doesn't work for all terminals. Some of them need the launch «working directory» argument. That's why run-in-terminal have string interpolation of arguments. What does string interpolation mean? run-in-terminal builds full command at first step and replace predefined substrings with parameters at second. For values from «example value» column above we can have such scenario:\n\nCurrent opened file in Atom: /path/to/somedir/foo.py, which has #!/usr/bin/python3 as shebang.\n\n    start-terminal-here-and-run -> konsole --noclose --workdir \"{working_directory}\" -e /usr/bin/python3 \"{file_path}\"\n\nthis will be interpolated to:\n\n    start-terminal-here-and-run -> konsole --noclose --workdir \"/path/to/somedir\" -e /usr/bin/python3 \"/path/to/somedir/foo.py\"\n\nIf run-in-terminal can't determine launcher or file_path (file not saved and has no name) it will do start-terminal-here.\n\n## Thanks to:\n[bobrocke](https://github.com/bobrocke), [clintwood](https://github.com/clintwood), [LeoVerto](https://github.com/LeoVerto), [marales](https://github.com/marales), [djengineerllc](https://github.com/djengineerllc), [LevPasha](https://github.com/LevPasha), [Kee-Wang](https://github.com/Kee-Wang), [jnelissen](https://github.com/jnelissen), [maxbrunsfeld](https://github.com/maxbrunsfeld).\n","downloads":11219,"stargazers_count":11},{"name":"terminal-commands","main":"./lib/terminal-commands","version":"1.2.0","description":"Setup commands to run in the terminal","keywords":["atom","terminal","commands"],"repository":"https://github.com/UziTech/terminal-commands","license":"MIT","engines":{"atom":">=1.0.0 <2.0.0"},"atomTestRunner":"./spec/runner.js","consumedServices":{"runInTerminal":{"description":"Allow to run commands in terminal.","versions":{"0.14.5":"consumeRunInTerminal"}}},"package-deps":["platformio-ide-terminal"],"dependencies":{"atom-package-deps":"4.6.2","fs-plus":"^3.0.2","promisificator":"^4.1.1"},"devDependencies":{"atom-jasmine3-test-runner":"^3.1.0","eslint":"4.19.1","temp":"0.8.3"},"readme":"[![Build Status](https://travis-ci.org/UziTech/terminal-commands.svg?branch=master)](https://travis-ci.org/UziTech/terminal-commands)\n[![Build status](https://ci.appveyor.com/api/projects/status/o0h54ouxl2jtvvfm?svg=true)](https://ci.appveyor.com/project/UziTech/terminal-commands)\n[![Dependency Status](https://david-dm.org/UziTech/terminal-commands.svg)](https://david-dm.org/UziTech/terminal-commands)\n\n# terminal-commands package\n\nSetup commands to run in the terminal from the command palette, context menu, or key binding.\n\n**Note**  Depends on [platformio-ide-terminal](https://github.com/platformio/platformio-atom-ide-terminal) to run!\n\n![screenshot](https://user-images.githubusercontent.com/97994/36390238-fd6c8a2c-1567-11e8-8517-d4986ac2fde2.gif)\n\n## Example\n\n```js\n// in ~/.atom/terminal-commands.json\n{\n  \"echo:file\": \"echo ${file}\",\n  \"echo:files\": [\"echo test\", \"echo ${files}\"],\n  \"echo:dir\": {\n    \"commands\": \"echo ${dir}\",\n    \"key\": \"alt-d\",\n    \"priority\": 0\n  },\n  \"echo:project\": {\n    \"commands\": \"echo ${project}\",\n    \"key\": \"alt-p\",\n    \"priority\": 100,\n    \"selector\": \".tree-view\"\n  }\n}\n```\n\n---\n\n![image](https://user-images.githubusercontent.com/97994/38253603-ae24915e-371c-11e8-9470-8db7d2f81fa3.png)\n\n---\n\n![image](https://user-images.githubusercontent.com/97994/34899525-1704ef86-f7bf-11e7-9088-d12d63ea2732.png)\n\n## Options\n\nThe commands in `terminal-commands.json` should be formatted as one of the following:\n\n-   Single string command:\n\n```js\n{\n  \"namespace:action\": \"command\"\n}\n```\n\n-   Multiple string commands:\n\n```js\n{\n  \"namespace:action\": [\"command 1\", \"command 2\"],\n}\n```\n\n-   Commands object with the following keys:\n\n```js\n{\n  \"namespace:action\": {\n    \"commands\": \"commands\", // (required) Can be a string or an array of strings\n    \"key\": \"alt-k\", // (optional) A default key binding\n    \"priority\": 100, // (optional) Key binding priority. Default = 0\n    \"selector\": \".css-selector\" // (optional) Selector to limit the key binding and context menu. Default = \"atom-workspace\"\n  }\n}\n```\n\n## Placeholders\n\nPlaceholders can be used so commands can use current command target in the commands.\nThe command target will be the active editor if from the command palette, or selected files if from the tree-view context menu.\n\n-   `${file}` - Replaced with the first target file path\n-   `${files}` - Replaced with the targets file paths separated by space\n-   `${dir}` - Replaced with the first target directory path\n-   `${project}` - Replaced with the first target file's project path\n","downloads":337,"stargazers_count":2},{"name":"atom-terminal","main":"./lib/atom-terminal","version":"0.8.0","description":"Open terminal in the current file's directory.","activationCommands":{"atom-workspace":["atom-terminal:open-project-root"]},"repository":"https://github.com/karan/atom-terminal","license":"MIT","engines":{"atom":">0.50.0"},"dependencies":{},"readme":"# atom-terminal\n\nOpen terminal on current file's directory with `ctrl-shift-t`.\n\nOpen a terminal in the project's root directory with `alt-shift-t`.\n\nKeybindings: `ctrl-shift-t`, `alt-shift-t`\n\nInstall: `apm install atom-terminal`\n\nConfig:\n```coffeescript\n\"atom-terminal\":\n    # only necessary if standard config doesn't find terminal app\n    app: \"/path/to/your/favorite/terminal\"\n    args: \"--useThisOptionWhenLaunchingTerminal\"\n```\n\n![atom-terminal](https://raw.github.com/karan/atom-terminal/master/terminal.gif)\n","downloads":199994,"stargazers_count":324},{"name":"platformio-ide-terminal","main":"./lib/platformio-ide-terminal","version":"2.8.4","description":"A terminal package for Atom, complete with themes, API and more for PlatformIO IDE. Fork of terminal-plus.","author":"Jeremy Ebneyamin","keywords":["PlatformIO","terminal-plus","terminal","iterm","panel","pty","tty","xterm","iterm","iterm2","console","powershell"],"contributors":[{"name":"Ivan Kravets","email":"me@ikravets.com","url":"http://platformio.org"},{"name":"Dmytro Kyrychuk","email":"dmytro.kyrychuck@gmail.com","url":"http://platformio.org"}],"homepage":"https://atom.io/packages/platformio-ide-terminal","repository":"https://github.com/platformio/platformio-atom-ide-terminal","license":"MIT","engines":{"atom":">=1.12.2 <2.0.0"},"dependencies":{"atom-space-pen-views":"^2.2.0","pty.js":"https://github.com/platformio/pty.js/tarball/prebuilt","term.js":"https://github.com/jeremyramin/term.js/tarball/master","underscore":"^1.8.3"},"activationHooks":["core:loaded-shell-environment"],"consumedServices":{"status-bar":{"versions":{"^1.0.0":"consumeStatusBar"}}},"providedServices":{"platformioIDETerminal":{"description":"PlatformIO IDE Terminal API","versions":{"1.1.0":"providePlatformIOIDETerminal"}},"runInTerminal":{"description":"Deprecated API for PlatformIO IDE 1.0","versions":{"0.14.5":"provideRunInTerminal"}}},"readme":"# PlatformIO IDE Terminal\nA terminal package for Atom, complete with themes, API and more for [PlatformIO IDE](http://platformio.org/platformio-ide).\n\n![demo](https://github.com/platformio/platformio-atom-ide-terminal/raw/master/resources/demo.gif)\n\n*[Nucleus Dark UI](https://atom.io/themes/nucleus-dark-ui) with [Atom Material Syntax](https://atom.io/themes/atom-material-syntax) and our Homebrew theme.*\n\n## Install\nReady to install?\n\nYou can install via apm: `apm install platformio-ide-terminal`\n\nOr navigate to the install tab in Atom’s settings view, and search for `platformio-ide-terminal`.\n\n## Usage\n\n`platformio-ide-terminal` stays in the bottom of your editor while you work.\n\nClick on a status icon to toggle that terminal (or ``ctrl-` ``). Right click the status icon for a list of available commands. From the right-click menu you can color code the status icon as well as hide or close the terminal instance.\n\n### Terminal\nYou can open the last active terminal with the `platformio-ide-terminal:toggle` command (Default:`` ctrl-` ``).  If no terminal instances are available, then a new one will be created. The same toggle command is used to hide the currently active terminal.\n\nFrom there you can begin typing into the terminal. By default the terminal will change directory into the project folder if possible. The default working directory can be changed in the settings to the home directory or to the active file directory.\n\n[See available commands below](#commands).\n\n## Features\n\n### Full Terminal\nEvery terminal is loaded with your system’s default initialization files. This ensures that you have access to the same commands and aliases as you would in your standard terminal.\n\n### Themes\nThe terminal is preloaded with several themes that you can choose from. Not satisfied?  \nUse the following template in your stylesheet:\n```css\n.platformio-ide-terminal .xterm {\n  background-color: ;\n  color: ;\n\n  ::selection {\n    background-color: ;\n  }\n\n  .terminal-cursor {\n    background-color: ;\n  }\n}\n```\n\n### Process Titles\nBy hovering over the terminal status icon, you can see which command process is currently running in the terminal.\n\n![](https://github.com/platformio/platformio-atom-ide-terminal/raw/master/resources/terminal_title.png)\n\n### Terminal Naming\nNeed a faster way to figure out which terminal is which? Name your status icons!\n\n![](https://github.com/platformio/platformio-atom-ide-terminal/raw/master/resources/status-icon_rename.png)\n\nAvailable via the status icon context menu.\n\n![](https://github.com/platformio/platformio-atom-ide-terminal/raw/master/resources/status-icon_rename-dialog.png)\n\n### Color Coding\nColor code your status icons!\n\n![](https://github.com/platformio/platformio-atom-ide-terminal/raw/master/resources/status-icon_color_coding.png)\n\nThe colors are customizable in the settings, however the color names remain the same in the context menu.\n\n### Sorting\nOrganize your open terminal instances by dragging and dropping them.\n\n![](https://github.com/platformio/platformio-atom-ide-terminal/raw/master/resources/sorting.gif)\n\n### Resizable\nYou can resize the view vertically, or just maximize it with the maximize button.\n\n### Working Directory\nYou can set the default working directory for new terminals. By default this will be the project folder.\n\n### File Dropping\nDropping a file on the terminal will insert the file path into the input. This works with external files, tabs from the Atom tab-view, and entries from the Atom tree-view.\n\n### Insert Selected Text\nInsert and run selected text from your text editor by running the `platformio-ide-terminal:insert-selected-text` command (`ctrl-enter`).\n\n![](https://github.com/platformio/platformio-atom-ide-terminal/raw/master/resources/insert_selected_text.gif)\n\nIf you have text selected, it will insert your selected text into the active terminal and run it.  \nIf you don't have text selected it, will run the text on the line where your cursor is then proceed to the next line.\n\n### Quick Command Insert\nQuickly insert a command to your active terminal by executing the `platformio-ide-terminal:insert-text` command.\n\n![](https://github.com/platformio/platformio-atom-ide-terminal/raw/master/resources/insert_text.png)\n\nA dialog will pop up asking for the input to insert. If you have the `Run Inserted Text` option enabled in the settings (default is false), platformio-ide-terminal will automatically run the command for you.\n\n#### Support for Special Keys\nSupport for IME, dead keys and other key combinations via the `Insert Text` dialog box. Just click the keyboard button in the top left of the terminal or set up a keymap to the `platformio-ide-terminal:insert-text` command.\n\n![](https://github.com/platformio/platformio-atom-ide-terminal/raw/master/resources/special_keys.gif)\n\nNote: Make sure you have the `Run Inserted Command` toggle off otherwise it will run your inserted text.\n\n### Map Terminal To\nMap your terminals to each file or folder you are working on for automatic terminal switching.\n\n#### File\n![](https://github.com/platformio/platformio-atom-ide-terminal/raw/master/resources/map_terminals_to_file.gif)\n\n#### Folder\n![](https://github.com/platformio/platformio-atom-ide-terminal/raw/master/resources/map_terminals_to_folder.gif)\n\nToggling the `Auto Open a New Terminal (For Terminal Mapping)` option will have the mapping create a new terminal automatically for files and folders that don't have a terminal. The toggle is located right under the `Map Terminals To` option.\n\n![](https://github.com/platformio/platformio-atom-ide-terminal/raw/master/resources/map_terminals_to_auto_open.gif)\n\n## Commands\n| Command | Action | Default Keybind |\n|---------|--------|:-----------------:|\n| platformio-ide-terminal:new | Create a new terminal instance. | `ctrl-shift-t`<br>or<br>`cmd-shift-t` |\n| platformio-ide-terminal:toggle | Toggle the last active terminal instance.<br>**Note:** This will create a new terminal if it needs to. | `` ctrl-` ``<br>(Control + Backtick) |\n| platformio-ide-terminal:prev | Switch to the terminal left of the last active terminal. | `ctrl-shift-j`<br>or<br>`cmd-shift-j` |\n| platformio-ide-terminal:next | Switch to the terminal right of the last active terminal. | `ctrl-shift-k`<br>or<br>`cmd-shift-k` |\n| platformio-ide-terminal:insert-selected-text | Run the selected text as a command in the active terminal. | `ctrl-enter` |\n| platformio-ide-terminal:insert-text | Bring up an input box for using IME and special keys. | –––––––––––– |\n| platformio-ide-terminal:fullscreen | Toggle fullscreen for active terminal. | –––––––––––– |\n| platformio-ide-terminal:close | Close the active terminal. | `ctrl-shift-x`<br>or<br>`cmd-shift-x` |\n| platformio-ide-terminal:close-all | Close all terminals. | –––––––––––– |\n| platformio-ide-terminal:rename | Rename the active terminal. | –––––––––––– |\n\n---\nA fork of [jeremyramin/terminal-plus](https://github.com/jeremyramin/terminal-plus).\n","downloads":1769386,"stargazers_count":783},{"name":"open-in-terminal","main":"./lib/open-in-terminal","version":"0.1.0","description":"An Atom package that opens the active project in Terminal, on macOS.","keywords":[],"activationCommands":{"atom-workspace":"open-in-terminal:open-project-in-terminal"},"repository":"https://github.com/berkcebi/open-in-terminal","license":"MIT","engines":{"atom":">=1.0.0 <2.0.0"},"dependencies":{},"readme":"# Open in Terminal\n\nAn Atom package that opens the active project in Terminal, on macOS. 🖥⚡️\n","downloads":198,"stargazers_count":1},{"name":"atom-mac-terminal","version":"1.0.4","description":"Opens selected file in a new Terminal tab on OSX","main":"lib/atom-mac-terminal.js","license":"MIT","author":{"name":"Marcin Ignac","email":"marcin.ignac@gmail.com","url":"https://github.com/vorg"},"dependencies":{"applescript":"^1.0.0"},"devDependencies":{},"scripts":{"test":"node test.js"},"keywords":["atom"],"repository":{"type":"git","url":"git://github.com/vorg/atom-mac-terminal.git"},"homepage":"https://github.com/vorg/atom-mac-terminal","bugs":{"url":"https://github.com/vorg/atom-mac-terminal/issues"},"engines":{"atom":">1.0.0"},"activationCommands":{"atom-workspace":["atom-mac-terminal:open"]},"readme":"# atom-mac-terminal\n\n[![experimental](http://badges.github.io/stability-badges/dist/stable.svg)](http://github.com/badges/stability-badges)\n\n[Atom](http://atom.io) plugin that opens selected file in a new Terminal tab on OSX.\n\n- If run from the command palette / or keyboard shortcut it will open currently edited file directory\n- If no file is open it will open the project root.\n- You can also right click to open file/directory from the tree view\n\nThis project is a replacement for [atom-terminal](https://github.com/karan/atom-terminal) on OSX inspired by [MacTerminal](https://github.com/afterdesign/MacTerminal) for SublimeText.\n\n## Key bindings:\n\n`ctrl+shift+t` - open current file in a new Terminal tab\n\n## License\n\nMIT, see [LICENSE.md](http://github.com/vorg/atom-mac-terminal/blob/master/LICENSE.md) for details.\n","downloads":6434,"stargazers_count":10},{"name":"terminal-status","main":"./lib/cli-status","version":"1.6.8","description":"A terminal interface and status icon","homepage":"https://github.com/guileen/terminal-status","repository":{"type":"git","url":"https://github.com/guileen/terminal-status"},"bugs":{"url":"https://github.com/guileen/terminal-status/issues"},"license":"MIT","dependencies":{"ansi-html-stream":"^0.0.3","domify":"^1.2.2","domutil":"^0.2.1","atom-space-pen-views":"^2.0.5"},"engines":{"atom":">0.50.0"},"readme":"terminal-status\n===============\n\n## Usage\nJust press `shift-enter`\n\n## Screenshot\n\nOpen multiple terminal.\n\n![A screenshot of terminal-status package](http://guileen.github.io/img/terminal-status/screenshot-1.1.0.gif)\n\nFancy ls.\n\n![A screenshot of terminal-status package](http://guileen.github.io/img/terminal-status/screenshot-ls.gif)\n\n## Feature\n\n* multiple terminal\n* colorful status icon\n* kill long live process\n* fancy ls\n\n## Hotkeys\n\n* `shift-enter` toggle current terminal\n* `command-shift-e` new terminal\n* `command-shift-j` next terminal\n* `command-shift-k` prev terminal\n\n## Changelog\n\n* 1.3.4\n  * use `child_process.exec` instead of `child_process.spawn`, support pipe like command\n\n* 1.3.3\n  * source ~/.profile and /etc/profile for environment variables.\n\n* 1.3.2\n  * fix PATH of /usr/local/bin\n  * support ~\n","downloads":26304,"stargazers_count":113},{"name":"terminal-syntax","theme":"syntax","version":"0.1.0","description":"A theme to make it look like you're editing on an old school terminal","repository":"https://github.com/sgtpepper43/terminal-syntax","license":"MIT","engines":{"atom":">0.50.0"},"readme":"# Terminal Theme\n\nA theme to emulate writing code on an old school terminal using vim or something\n\n![A screenshot](https://raw.githubusercontent.com/sgtpepper43/terminal-syntax/master/terminal-syntax-screenshot.png)\n","downloads":3279,"stargazers_count":0},{"name":"atom-terminal-panel","main":"./lib/atp","version":"4.4.4","description":"An advanced ATOM terminal interface. Fork of awesome atom package - terminal-panel","repository":"https://github.com/isis97/atom-terminal-panel","license":"MIT","engines":{"atom":">0.135.0"},"dependencies":{"ansi-html-stream":"0.0.3","atom-space-pen-views":"^2.0.3","jquery-autocomplete-js":"^1.0.6","iconv-lite":"^0.4.7"},"readme":"\n![Shields.io badge](https://img.shields.io/apm/v/atom-terminal-panel.svg?style=flat-square)\n![Shields.io badge](https://img.shields.io/apm/dm/atom-terminal-panel.svg?style=flat-square)\n![Shields.io badge](https://img.shields.io/apm/l/atom-terminal-panel.svg?style=flat-square)\n\natom-terminal-panel\n==============\n\n(a fork of super-awesome atom package - thedaniel/terminal-panel)\nPlugin for ATOM Editor.\n\n## Short note\n\nThis project uses [jquery-autocomplete-js](http://isis97.github.io/autocomplete-js/) for autocompletion.\n\n## Development\n\nThis project is in alpha stage.\nPlease contribute this project if you liked it.\nAll the help is welcome.\nThank you.\n\n## Usage\nJust press `shift-enter` or just `` Ctrl + ` `` (control + backtick) and enjoy your cool ATOM terminal :D\nTry pressing the `ctrl` in the terminal for dynamic suggestions list!\n\n## Screenshot\n\nTerminal with fancy file links and interactive interface.\n\n![A screenshot of atom-terminal-panel package](https://raw.githubusercontent.com/isis97/atom-terminal-panel/master/static/example.gif)\n\nFancy custom highlighting rules.\n\n![A screenshot of atom-terminal-panel package](https://raw.githubusercontent.com/isis97/atom-terminal-panel/master/static/example3.gif)\n\nThere's also nice looking easy-to-use command finder dialog (just to search your custom commands and terminal build-ins):\n\n![A screenshot of atom-terminal-panel package](https://raw.githubusercontent.com/isis97/atom-terminal-panel/master/static/example_command_finder.png)\n\n\n## Feature\n\n* multiple terminal\n* colorful status icon\n* kill long live process\n* fancy ls (with custom extension colouring!)\n  * Do you wanna have a blue or a green executables? Do the yellow shell scripts look nice?\n* file and directory links (auto path detection)\n* interactive content (tooltips and on-click-actions)\n* highlighting rules (define your own highlight options - supports awesome stuff like regex matching, replacement and link creation)\n* nice looking slide animation on terminal open\n* navigate command history using arrow keys\n  * Just like in normal, native terminal.\n* search your favourite commands and built-ins\n  * Just type `?`, easy right?)\n* many useful special variables (like path to the currenly edited file)\n* customize your command prompt like never before using text formatting annotation and special variables!\n  * Do you want a current time, computer name or a cwd in your command prompt? There's no problem.\n* easily create custom commands!\n  * You don't have to play with dirty shell script files!\n* easily add new buttons to the terminal toolbar\n  * Now you can quickly access your command just by pressing one button\n* auto suggestions and commands descriptions for ease of use\n* modular commands system\n  * To add new commands just write your own /or download existing plugin!\n  * And copy it to the ./commands directory! - Easy, right?\n\nAnd a lot more! See it by yourself!\n\n## Plugins\n\nThis ATOM plugin is modular. You can create your own commands or download existing from the other users.\nThe release contains also the built-in plugins (for file system management etc.).\n\n## Terminal-commands.json\nThe `terminal-commands.json` is the main configuration file for this package. If it's not present (or the JSON syntax is invalid) a new config file is created (in folder .atom).\n\nThe config file contains:\n\n* custom commands definitions\n* rules (defininig highlights, regex replacement for text etc.)\n\nThe sample config file can look like:\n\n```json\n{\n  \"commands\": {\n    \"hello\": {\n      \"description\": \"Some description\",\n      \"command\": [\n        \"echo Hello world :D\",\n        \"echo This = %(*)\",\n        \"echo is\",\n        \"echo example usage\",\n        \"echo of the console\"\n      ]\n    }\n  },\n  \"toolbar\": [],\n  \"rules\": {\n    \"warning: (.*)\" : {\n      \"match\": {\n        \"matchLine\": \"true\"\n      },\n      \"css\": {\n        \"color\": \"yellow\"\n      }\n    }\n  }\n}\n```\n\nThe above configuration file will create highlight rule for all lines containing \"warning: \" text (this lines will be colored yellow).\n\n### Creating custom terminal shortcuts\n\nYou can create your own shortcuts buttons, which are placed on the terminal toolbar.\nTo do it just put a new entry in the `toolbar` property:\n```json\ntoolbar: [\n  [\"SHORTCUT NAME\", \"COMMAND TO BE EXECUTED\"]\n]\n```\n\nE.g. creating a button, which displays all avaliable terminal bultin commands:\n```json\ntoolbar: [\n  [ \"Display all commands\", \"memdump\" ]\n]\n```\n\nAnother example. Now the button will move the terminal to the C: directory:\n```json\ntoolbar: [\n  [\"C:\", \"cd C:\\\\\"]\n]\n```\n\nYou can add also tooltips describing the button functions:\n```json\ntoolbar: [\n  [\"C:\", \"cd C:\\\\\", \"Moves the terminal to the C:\\\\ directory.\"]\n]\n```\n\nAnd now creating custom actions:\n```json\n\"actions\": [\n\t[\n    \"test\",\n    \"hello_world\"\n  ]\n]\n```\nActions allows you to run your commands as atom commands or bind them to the specified keys.\nFrom the moment of the terminal initialization a new atom command is created - `atom-terminal-panel:test`,\nwhich will execute the `hello_world` command in the terminal.\n\nYou can now bind the command to the specified keys by editing your `keymap.cson`:\n```json\n'.workspace':\n  'alt-t': 'atom-terminal-panel:test'\n```\n\nEasy, right?\n\n### Defining custom commands\n\nEach command is defined in the `commands` entry the following way:\n\n```json\n\"name\": {\n  \"description\": \"Simple description shown in command view (activated by memdump or ?)\",\n  \"command\": [\"command0\", \"command1\", \"command2\"]\n}\n```\n'command0', 'command1'... are the commands that will be invoked by the user entry.\nExample involving `g++` usage:\n```json\n\"build\": {\n  \"description\": \"Build C/C++ application.\",\n  \"command\": [\n    \"echo Compiling %(file) using g++ Please wait...\",\n    \"g++ \\\"%(file)\\\" -o \\\"%(file).runnable\\\"\",\n    \"echo Compilation finished %(file).\"\n  ]\n}\n```\nAs you can see you are able to build the current C/C++ project using only a single command.\nYou may also try creating a build command accepting single file path (simple source file path) and\nthe auto_build command, which will execute build command with `%(file)` parameter.\nE.g.\n```json\n\"build\": {\n  \"description\": \"Build C/C++ application.\",\n  \"command\": [\n    \"echo Compiling %(0) using g++ Please wait...\",\n    \"g++ %(0) -o %(0).runnable\",\n    \"echo Compilation finished %(0).\"\n  ]\n},\n\"auto_build\": {\n  \"description\": \"Automatically build C/C++ application.\",\n  \"command\": [\n    \"build \\\"%(file)\\\"\"\n  ]\n}\n```\n\n### Defining custom rules\n\nThe highlight rules that are placed in `rules` property can be defined using two methods.\nThe simple way looks like:\n```json\n  \"regexp\" : {\n    \"css-property1\": \"css-value1\",\n    \"css-property2\": \"css-value2\",\n    \"css-property3\": \"css-value3\"\n  }\n```\n\nOr more complex (and also more powerful) way:\n```json\n  \"REGEXP\" : {\n    \"match\" : {\n      \"matchLine\": true,\n      \"replace\": \"REPLACEMENT\"\n    },\n    \"css\": {\n      \"color\": \"red\",\n      \"font-weight\": \"bold\"\n    }\n  }\n```\n\nThe REGEXP will be replaced with REPLACEMENT and all the line with matched token will be colored to red(matchLine:true).\n\nYou can also override default regular expression flags (default are: `gm`):\n\n```json\n\"match\": {\n  \"flags\": [ \"g\", \"i\" ]\n}\n```\n\nAnd specify how many lines under the match should be replaced:\n\n```json\n\"match\": {\n  \"matchLine\": true,\n  \"matchNextLines\": \"3\"\n}\n```\n\nThis rule will be applied to the entire line with the match and the next 3 lines (below it).\nNote that, the `matchNextLines` option can be used only with `matchLine` set to `true`, otherwise it's got no meaning.\n\n#### Getting more from custom patterns\n\nYou can event make your patterns to be applied to the html code.\nAdding the `forced` option to the `match`:\n```json\n\"match\": {\n  \"forced\": true\n}\n```\n\nFrom now your pattern will be applied to the html code, so it may seriously broke entire terminal output!\nThe forced patterns must be carefully designed to correctly manipulate the html code.\nIf you're a beginner you should do most things without using forced patterns.\n\n\n### More about regex rules\n\nYou can use the following properties in regex matches:\n\n* `matchLine` - bool value specifies if the regex should be applied to the whole line\n* `matchNextLines` - integer value specifies how many lines after the line containing current match should be also matched\n* `replace` - text that the match will be replaced with\n\n### Special annotation\n\nYou can use special annotation (on commands/rules definitions or in settings - command prompt message/current file path replacement) which is really powerful:\n\n* (R - can be used in the rules user definitions)\n* (T - can be directly typed to the terminal)\n* (A - can be used from the terminal API)\n\n| Property name | Usage context | Description |\n|----------------------------------------------------------------------------------------------------|---------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `;;` | R/T/A | Divides the commands (commands divided by this will be executed separatly; one after another) |\n| `%(dynamic)` | R/T/A | Indicates that the value should be dynamically updated. Usage example: `echo %(raw) %(dynamic) <ANY CONTENT WITH VARIABLES>` |\n| `%(raw)` | R/T/A | Used to delay the variables expansion (the variables are expanded only at output - can be used with `echo` and `%(dynamic)` to create dynamic entries) |\n| `%(project.root)` | R/T/A | Refers to the first currently opened project directory |\n| `%(project.count)` | R/T/A | Refers to the number of the currently opened project directories |\n| `%(project:[index])` | R/T/A | Refers to the choosen currently opened project directory |\n| `%(username)` `%(user)` | R/T/A | Refers to the currently logged user |\n| `%(computer-name)` `%(hostname)` | R/T/A | Refers to the currently used computer's name |\n| `%(home)` | R/T/A | Refers to the current user home directory (experimental) |\n| `%(path)` `%(cwd)`  | R/T/A | Refers to the current working directory path |\n| `%(atom)` | R/T/A | Refers to the atom directory |\n| `%(file)` | R/T/A | Refers to the current file - same as %(editor.file) |\n| `%(editor.file)` | R/T/A | Refers to the file currently opened in the editor (full path) |\n| `%(editor.path)` | R/T/A | Refers to the file currently opened in the editor (parent folder path) |\n| `%(editor.name)` | R/T/A | Refers to the file currently opened in the editor (file name) |\n| `%(line)` | T | Refers to the input command number (used for prompt styling) |\n| `%(env.[property])` | R/T/A | Refers to the node.js environmental variables - To get the list of all available system properties use `%(env.*)` ([See node.js process_env](http://nodejs.org/api/process.html#process_process_env)) |\n| `%(env.*)` | T | Refers to the list of all available environmental (native) properties ([See node.js process_env](http://nodejs.org/api/process.html#process_process_env)) |\n| `%(command)` | R/T/A | Refers to the lastly used command |\n| `%(link) [path] %(endlink)` | R/T/A | Creates dynamic terminal file linkage with the given file path. |\n| `%(day)` | R/T/A | Refers to the current system time (2-digit day number) |\n| `%(month)` | R/T/A | Refers to the current system time (2-digit month number) |\n| `%(year)` | R/T/A | Refers to the current system time (4-digit year number) |\n| `%(hours)` | R/T/A | Refers to the current system time (2-digit 24-hour format number) |\n| `%(minutes)` | R/T/A | Refers to the current system time (2-digit minutes number) |\n| `%(seconds)` | R/T/A | Refers to the current system time (2-digit seconds number) |\n| `%(milis)` | R/T/A | Refers to the current system time (2-digit miliseconds number) |\n| `%(hours12)` | R/T/A | Refers to the current system time (2-digit 12-hour format number) |\n| `%(ampm)` `%(AMPM)` | R/T/A | Refers to the am/pm /or AM/PM text (for 12-hour formats) |\n| `%(.day)` `%(.month)` `%(.year)` `%(.hours)` `%(.minutes)` `%(.seconds)` `%(.milis)` `%(.hours12)` | R/T/A | Refers to the time variables, but always skips leading zeros |\n| `%(^[formatter])` | R/T/A | Text formatting modifiers. |\n| `%(disc)` | R/T/A | Refers to the current working directory (disc name) |\n| `%(path:[index])` | R/T/A | Refers to the current working directory (access path breadcrumbs) |\n| `%(tooltip:[displayed text]:content:[tooltip content])` | R/T/A | Creates interactive tooltip (displayed text and tooltip content cannot contain any special characters) |\n| `%(label:[type]:text:[text])` | R/T/A | Creates interactive label (the text cannot caontain any spacial character) - the label types are: error, danger, warning, info, default, badge) |\n| `%([index])` | A | Refers to the parameters passed to the invoked command. |\n| `%([index])` | R | Refers to the regular expression catching group (group 0 is entire match) |\n| `%(content)` | R | Refers to the entire match found by the regular expression. |\n| `%(*)` | A | Refers to the all passed parameters. |\n| `%(*^)` | A | Refers to the command string (all passed arguments with the command name at the beginning) |\n| `%(^)` | R/T/A | Text formatting annotation (means end of the earlier used text modifier - each used modifier should have its own formatting end) |\n| `%(^#[hex color])` | R/T/A | Text formatting annotation (sets the colour of the text) |\n| `%(^b)` `%(^bold)` | R/T/A | Text formatting annotation (makes the text bolded) |\n| `%(^i)` `%(^italic)` | R/T/A | Text formatting annotation (creates text in italics) |\n| `%(^u)` `%(^underline)` | R/T/A | Text formatting annotation (makes the text underlined) |\n| `%(^l)` or `%(^line-through)` | R/T/A | Text formatting annotation (creates line through the text) |\n\nA few words about indexing in variables.\nThe variable components are always indexed from 0, so `%(path:0)` refers to the first path component.\nYou can also reference last element of the path using negative values: `%(path:-1)` is last element, `%(path:-2)` the seconds last etc.\nThe same for referencing passed parameters - `%(INDEX)` and project directories - `%(project:INDEX)`.\n\n### Text formatting\n\nPlease use the `%(^...)` modifiers to format the text:\n\n* `%(^)` - ends the text formatting\n* `%(^#000000)` - colors the text with the hex color\n* `%(^b) or %(^bold)` - creates bold text\n* `%(^i) or %(^italic)` - creates text in italics\n* `%(^u) or %(^underline)` - creates underlined text\n* `%(^l) or %(^line-through)` - creates line trough the text\n\nExample usage:\n```\ndefault %(^i)italics%(^) %(^u)underline%(^) %(^b)%(^i)bold italics%(^)%(^) %(^#DAA520)colored%(^)\n```\n\n## Internally defined commands\n\nYou can take advantage of commands like `memdump` which prints information about all loaded commands (internal, not native!).\nHere the list of all commands:\n\n* `ls`\n* `new FILENAME` - creates new empty file in current working directory and opens it instantly in editor view\n* `edit FILENAME` - opens a given file in editor\n* `link FILENAME` - creates new file link (you can use it to open a file)\n* `rm FILENAME` - removes file in current working directory\n* `memdump` or `?` - prints information about all loaded commands\n* `clear` - clears console output\n* `cd` - moves to a given path\n* `update` - reloads plugin config (terminal-commands.json)\n* `reload` - reloads atom window\n\nIncluded example commands:\n\n* `compile` - compiles current file using g++\n* `run` - runs the previously compiled file\n* `test FILENAME` - runs the test on the compiled application FILENAME is a FILE0.in file and the compiled application name must be FILE.exe e.g. `test test5.in` means `test.exe < test5.in`\n\n### Internal configuration\n\nYou can modify the extensions.less file and add your own extension colouring rules.\nE.g:\n\n```less\n  .txt {\n    color: hsl(185, 0.5, 0.5);\n    font-weight: bold;\n  }\n  .js {\n    color: red;\n  }\n```\n\nSimple like making a cup of fresh coffee...\nJust dot, extension name and CSS formatting.\n\nThe ./config/terminal-style.less contains the general terminal stylesheet:\nE.g.\n``` less\nbackground-color: rgb(12, 12, 12);\ncolor: red;\nfont-weight: bold;\n```\nYou can modify it to make the terminal look cooler.\n\n### Creating more advanced custom functions (plugins)\n\nThe ./commands directory contains the plugins (you can add your own commands).\nEach plugin exports a list of all custom commands (each plugin directory must contain `index.coffee` file - its entry point, which looks like described below)\nE.g.\n```coffeescript\nmodule.exports =\n  \"hello_world\":\n    \"description\": \"Prints hello world message to the screen.\"\n    \"command\": (state, args)->\n      return \"Hello world\"\n```\nThe state is the terminal view object and the args - the array of all passesd parameters.\nYour custom functional command can also create console links using ```state.consoleLink path```, labels using ```state.consoleLabel type, text``` or execute other commands:\nE.g.\n```coffeescript\n\"call_another\":\n  \"description\": \"This example shows how to call another command.\"\n  \"command\": (state, args)->\n    return state.exec \"echo Hello world\", state, args\n```\nBut if you're using ```state.exec``` you must remember about passing not only command string but also `state` and `args` parameters (array of refernced parameters).\nThe array of the referenced parameters contains all parameters which will be referenced by a command string (element at zero index in array will be used for %(0) replacement). If the command string do not reference its parameters you can pass only a null value.\nAs you can see all terminal messages are displayed automatically (just return the string message). but you can also print them manually:\n``` coffeescript\n\"hello_world\":\n  \"description\": \"Hello world example with two messages.\"\n  \"command\": (state, args)->\n    state.message 'Hello world'\n    return 'Second string hue hue :)'\n```\n\nYou can specify the command description, example usage and if the plugin command is outdated - make it deprecated:\n``` coffeescript\n\"hello_world\":\n  \"deprecated\": true\n  \"example\": \"hello_world\"\n  \"params\": \"[NONE]\"\n  \"description\": \"Hello world example with two messages.\"\n  \"command\": (state, args)->\n    state.message 'Hello world'\n    return 'Second string hue hue :)'\n```\n\nYou can also export new variables:\n```coffeescript\n\"name\":\n  \"description\": \"My own variable!\"\n  \"variable\": (state) -> return \"LOL\"\n```\nIn the given example the variable can be acessed by typing `%(name)`.\n\n## More about console\n\nAs you can see in previous examples we were calling `state.exec`.\nThis method accepts tree parametes:\n`command`, `args_reference`, `state`\n`command` is the string command to be executed e.g. `echo test` or `format C:`\n`args_reference` is the array containing all reference arguments e.g. if you passes a ['arg0', 'arg1'] as parameter the `%(0)` sequence will be replaced with `arg0` text and `%(1)` with `arg1`. If this paramter is undefined or null the command is executed normally and the `%(0)` sequences are simply removed.\n`state` - the console view object e.g. `state.exec 'echo test > test.txt', null, state`\n\nYou can also call other useful console methods:\n* `state.message 'MESSAGE'` - displays a message (can contains css/html formatting)\n* `state.rawMessage 'MESSAGE'` - displays a message without parsing special sequences like `%(link)...%(endlink)` or `%(cwd)` etc.\n* `state.clear` - clears console output\n* `state.consoleLink 'FILENAME'` - creates console link to a given file (returns text which will be replaced with interactive file link)\n* `state.consoleLabel 'TYPE', 'TEXT'` - creates console label just like `%(label:TYPE:text:TEXT)`\n\n## Hotkeys\n\n* `shift-enter` toggle current terminal\n* `command-shift-t` new terminal\n* `command-shift-j` next terminal\n* `command-shift-k` prev terminal\n* `` ` `` - toggle terminal\n* `escape` (in focused input box) - close terminal\n\n## TODO\n\n* Make a more cool terminal cursor.\n* More interactive stuff\n* Maybe a little bash parser written in javascript?\n* Some about stdinput (which is currently really bad)\n\n## Example configuration\n\nHere it is, the example configuration (terminal-commands.json) - that you can see on the preview images.\nTo use it just copy it to your ./atom/terminal-commands.json file (if the file doesn't exist call `update` command and it should be created).\n\nThe regex rules preview can be easily checked by invoking `echo` command (e.g. `echo warn test warning messages.`).\n\nNote that after each config update you must call `update` command otherwise changes will take no effects.\n\n```json\n{\n\t\"_comment\": \"Package atom-terminal-panel: This terminal-commands.json file was automatically generated by atom-terminal-package. It contains all useful config data.\",\n\t\"commands\": {\n\t\t\"hello_world\": {\n\t\t\t\"description\": \"Prints the hello world message to the terminal output.\",\n\t\t\t\"command\": [\n\t\t\t\t\"echo Hello world :D\",\n\t\t\t\t\"echo This is\",\n\t\t\t\t\"echo example usage\",\n\t\t\t\t\"echo of the console\",\n\t\t\t\t\"echo arg[0] = %(0)\",\n\t\t\t\t\"echo arg[1] = %(1)\"\n\t\t\t]\n\t\t}\n\t},\n\t\"actions\": [\n\t\t[\"test\", \"hello_world\"]\n\t],\n\t\"toolbar\": [\n\t\t[\n\t\t\t\"foo\",\n\t\t\t\"bar\",\n\t\t\t\"Ecce est foo-bar exemplum!\"\n\t\t],\n\t\t[\n\t\t\t\"clear\",\n\t\t\t\"clear\",\n\t\t\t\"Clears the console output.\"\n\t\t],\n\t\t[\n\t\t\t\"info\",\n\t\t\t\"info\",\n\t\t\t\"Prints the terminal welcome message.\"\n\t\t],\n\t\t[\n\t\t\t\"all available commands\",\n\t\t\t\"memdump\",\n\t\t\t\"Displays all available builtin commands. (all commands except native)\"\n\t\t]\n\t],\n\t\"rules\": {\n\t\t\"\\\\b[A-Z][A-Z]+\\\\b\": {\n\t\t\t\"match\": {\n\t\t\t\t\"flags\": [\n\t\t\t\t\t\"g\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"css\": {\n\t\t\t\t\"color\": \"gray\"\n\t\t\t}\n\t\t},\n\t\t\"(error|err):? (.*)\": {\n\t\t\t\"match\": {\n\t\t\t\t\"matchLine\": true,\n\t\t\t\t\"replace\": \"%(label:error:text:Error) %(0)\"\n\t\t\t},\n\t\t\t\"css\": {\n\t\t\t\t\"color\": \"red\",\n\t\t\t\t\"font-weight\": \"bold\"\n\t\t\t}\n\t\t},\n\t\t\"(warning|warn|alert):? (.*)\": {\n\t\t\t\"match\": {\n\t\t\t\t\"matchLine\": true,\n\t\t\t\t\"replace\": \"%(label:warning:text:Warning) %(0)\"\n\t\t\t},\n\t\t\t\"css\": {\n\t\t\t\t\"color\": \"yellow\"\n\t\t\t}\n\t\t},\n\t\t\"(note|info):? (.*)\": {\n\t\t\t\"match\": {\n\t\t\t\t\"matchLine\": true,\n\t\t\t\t\"replace\": \"%(label:info:text:Info) %(0)\"\n\t\t\t},\n\t\t\t\"css\": {}\n\t\t},\n\t\t\"(debug|dbg):? (.*)\": {\n\t\t\t\"match\": {\n\t\t\t\t\"matchLine\": true,\n\t\t\t\t\"replace\": \"%(label:default:text:Debug) %(0)\"\n\t\t\t},\n\t\t\t\"css\": {\n\t\t\t\t\"color\": \"gray\"\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n## Experiments\n\nThis package is in alpha development phase. You can enable experimental features, which may be added to the software in incoming releases.\n","downloads":107138,"stargazers_count":142},{"name":"atom-karaf-terminal","main":"./lib/karaf-terminal","version":"0.25.0","description":"Opens a terminal tab within Atom that is configured to run Karaf","keywords":["atom","karaf","shell"],"activationCommands":{"atom-workspace":["atom-karaf-terminal:open","atom-karaf-terminal:split-left","atom-karaf-terminal:split-right","atom-karaf-terminal:split-up","atom-karaf-terminal:split-down"]},"repository":"https://github.com/gurkerl83/atom-karaf-terminal","license":"MPL/2.0","engines":{"atom":">=0.182.0 <2.0.0"},"dependencies":{"atom-space-pen-views":"^2.0.3","debounce":"0.0.3","fs-plus":"^2.2.3","keypather":"^1.3.2","stream-splitter":"^0.3.2"},"readme":"# Karaf Terminal\n\nOpens a terminal tab or pane within Atom that is configured to run Karaf.\n\nThe main objective is to provide the simplest way to try Karaf by providing direct access to an isolated install of Karaf that does not interfere with a system JVM Installation.\n\nAnother objective is creating better integration between the terminal and the editor without re-implementing terminal features in the editor or editor features in the terminal.\n\n**Note: this project is alpha-stage. It is being developed on OS X first, but will eventually support Linux and Windows as well. For outstanding work, see the [issues](https://github.com/gurkerl83/atom-karaf-terminal/issues).**\n\nThe Karaf Terminal installs a binary build of Karaf.\n\n## License\n\nKaraf Terminal is licensed under [Mozilla Public License, 2.0](https://www.mozilla.org/MPL/2.0/).\n\n## Thanks\n\nKaraf Terminal is heavily inspired by term2, term, and terminal. Thanks to the authors of those packages. The term.js library is used. The copyright notice for term.js is included in lib/vendor/term.js.\n","downloads":448,"stargazers_count":0},{"name":"open-terminal-here","version":"2.3.2","description":"Open the Terminal (OSX, Linux) or Command Prompt (Windows) in the given directory via context menu or keyboard shortcut.","activationCommands":{".tree-view .selected, atom-text-editor, atom-workspace":["open-terminal-here:open"],"atom-workspace":["open-terminal-here:open-root"]},"repository":"https://github.com/blueimp/atom-open-terminal-here","license":"MIT","engines":{"atom":">=1.0.0"},"readme":"# Open Terminal Here\n\nOpen the Terminal (Mac OS X, Linux) or Command Prompt (Windows)\nin the given directory via context menu or keyboard shortcut.\n\n![Screenshot of the \"Open Terminal Here\" menu item displayed][1]\n\n## Keyboard shortcuts\n\n### Open the Terminal in the current directory\n\nPlatform | Keyboard shortcut\n-------- | -----------------\nMac OS X | `ctrl-cmd-t`\nWindows  | `ctrl-alt-t`\nLinux    | `ctrl-alt-t`\n\n### Open the Terminal in the project directory\n\nPlatform | Keyboard shortcut\n-------- | -----------------\nMac OS X | `alt-cmd-t`\nWindows  | `ctrl-alt-shift-t`\nLinux    | `ctrl-alt-shift-t`\n\n## FAQ\n\n### How to open a new tab instead of a new window?\n\n#### Mac OS X\n\n1. Open [Automator][2] and select `Application` as new document.\n2. From the Library, add `Run Applescript` as Automator action.\n3. Replace the sample AppleScript code with the code from\n   [terminal-tab.scpt][3].\n4. Save the Automator app as `TerminalTab.app` to your Applications folder.\n5. In the `open-terminal-here` settings, set `Command` to\n   `open -a TerminalTab.app \"$PWD\"`.\n\n#### Ubuntu Linux\n\n1. Install [xdotool][4]:  \n   `sudo apt-get install -y xdotool`\n2. Download [terminal-tab.sh][5] and make it executable:  \n   `chmod +x ./terminal-tab.sh`\n3. Move the script to a directory in your path:  \n   `sudo mv ./terminal-tab.sh /usr/local/bin/terminal-tab`\n4. In the `open-terminal-here` settings, set `Command` to\n   `terminal-tab`.\n\n[1]: https://raw.githubusercontent.com/blueimp/atom-open-terminal-here/master/screenshot.png\n[2]: https://en.wikipedia.org/wiki/Automator_(software)\n[3]: https://github.com/blueimp/atom-open-terminal-here/blob/master/terminal-tab.scpt\n[4]: http://www.semicomplete.com/projects/xdotool/\n[5]: https://raw.githubusercontent.com/blueimp/atom-open-terminal-here/master/terminal-tab.sh\n","downloads":48869,"stargazers_count":109},{"name":"terminal-panel-uoa","main":"./lib/cli-status","version":"0.5.12","description":" A terminal interface and status icon. Includes an API that allows any package to make a terminal, pass it a command and see the output (all via code). Works for Windows,Linux and OSX.","repository":"https://github.com/arrayoutofbounds/terminal-panel","license":"MIT","engines":{"atom":">=1.0.0 <2.0.0"},"activationCommands":{"atom-workspace":["terminal-panel-uoa:activate","terminal-panel-uoa:new","terminal-panel-uoa:toggle"]},"dependencies":{"ansi-html-stream":"0.0.3","atom-space-pen-views":"^2.0.3","domify":"~1.2.2","domutil":"~0.2.1"},"providedServices":{"terminal-panel-uoa":{"description":"Gives a Command output view","versions":{"1.2.3":"provideCommandOutputView"}}},"readme":"Are you looking for a way to pass commands to the terminal via code? Do you want to run long processes with the ability to\nkill or destroy them? Do you want to ensure your code can create a command line/terminal in all operating systems? Do you want\nto use the terminal and enter commands while in atom?\n\nIf so, then this package is for you. Even if you do not need the API, you can use the GUI.\n\nterminal-panel-uoa\n==============\n\n A terminal interface and status icon. Fork of terminal-panel.\n\n Added API that allows any package to make a terminal, pass it a command\n and see the output (all via code).\n\n Works for Windows,Linux and OSX. No Dependencies.\n\n###### Please do not hesitate to send any queries on github or at ades597@aucklanduni.ac.nz\n\n#### NOTE : You must go  and \"activate terminal panel\" from the package menu when atom is started. If you do not then you will receive a error when you call it from your package.\n\n## Example\n\nI have used this package for research at University of Auckland (hence the uoa at the end of the name).\n\nDownload the \"sysj\" package in atom or go to https://github.com/arrayoutofbounds/sysj to see an example of a package using the API.\n\nAs you can see, I have a running process. At the bottom you can see the blue icon that shows the currently open terminal which\nyou can toggle or destroy.\n\n\n![A screenshot of your package](http://i.imgur.com/NMCKks0.png)\n\n\n## How to use the API\n\nThe package.json supplies the services provided. Consume the service (after reading the services API atom documentation).\nThen use the service and be able to add a terminal from your package programatically.\n\nThe service gives a Cli-status-view object. That has the methods to create new terminals, toggle between them etc\nEach Cli-status-view object has a command-output-view object that actually runs the processes and displays the output.\nThe code has been commented, so please read it before using it.  \n\n\n##### Consuming the service in package.json:\n\n```json\n\"consumedServices\": {\n  \"terminal-panel-uoa\": {\n    \"versions\": {\n      \"^1.2.3\": \"consumeCommandOutputView\"\n    }\n  }\n}\n```\n\n##### In your main file for the package you are building, add the following method:\n\n```coffee\nconsumeCommandOutputView: (commandOutputView) ->\n  @commandOutputView = commandOutputView # assigns a instance variable\n  console.log \"API consumed\" # lets you know you have used the API\n  console.log @commandOutputView # prints the command output view object in the log\n  console.log \"New terminal created\" # lets you know a new terminal has been created\n```\n\n##### Then you can use the command output view to make a new terminal by adding the following method to your code:\n\n```coffee\ncreateTerminal: ->\n  terminal = @commandOutputView.newTermClick() #create new terminal\n  terminal\n```\n\n##### Example of using the method shown above\n\nSpawning the terminal will create a new terminal with the command you pass into it. Please beware of the path\nbeing different in the OS. Use path.sep to ensure it works on windows and linux/MacOSX.\n\nThe GUI will be created and the result of the command will be shown.\n\n```coffee\nterminal = @createTerminal()\nterminal.spawn(jdkPath + \" -classpath \" + pathToJar + @pathToClass + \" com.systemj.SystemJRunner \" + filePath,\"java\",[\"-classpath\", \"\" + pathToJar + @pathToClass , 'com.systemj.SystemJRunner',\"\" + filePath])\n```\n\n\n## What you can do with the terminal GUI\n\nTerminal-panel executes your commands and displays the output. This means you can do all sorts of useful stuff right inside Atom, like:\n* run build scripts\n* start servers\n* npm/apm (install, publish, etc)\n* grunt\n* etc. etc.\n\nSome things it can't do (yet):\n* The \"terminal\" isn't interactive so it can't do tab-autocomplete\n* Or ask for a commit message\n* ... stuff like that.\n\n## Usage\nJust press ``ctrl-` ``.\n\n## Screenshot\n\n![A screenshot of terminal-status package](https://raw.githubusercontent.com/thedaniel/terminal-panel/master/terminal-demo.gif)\n\n## Feature\n\n* multiple terminals\n* status icon\n* kill long running processes\n* optional fancy ls\n\n## Extra info\n\nProcesses are killed via the node js api. You can check via \"tasklist\" for windows or \"top/htop\" for unix/linux/OSX.\nWhen the process running is killed the pid of the process ceases to exist.\n\n## Hotkeys\n\n* ``ctrl-` `` toggle current terminal\n* `command-shift-t` new terminal\n* `command-shift-j` next terminal\n* `command-shift-k` prev terminal\n* `command-shift-x` destroy terminal\n* `up` and `down` for \"command history\"\n\n---\nA fork of [guileen/terminal-status](https://github.com/guileen/terminal-status).\n","downloads":1525,"stargazers_count":0},{"name":"run-last-terminal-command","main":"./lib/run-last-terminal-command","version":"1.1.1","description":"Runs the previous command in the foreground Terminal.app windows selected tab","keywords":["terminal","osx","terminal.app","previous","runner","last"],"activationCommands":{"atom-workspace":"run-last-terminal-command:run"},"repository":"https://github.com/paulatbipsync/run-last-terminal-command","license":"MIT","engines":{"atom":">=1.0.0 <2.0.0"},"readme":"# run-last-terminal-command package\n\nRuns the previous command in the foreground Terminal.app windows selected tab","downloads":191,"stargazers_count":2},{"name":"rubinius-terminal","main":"./lib/rubinius-terminal","version":"0.0.1","description":"Opens a terminal tab within Atom that is configured to run Rubinius","activationCommands":{"atom-workspace":["rubinius-terminal:open","rubinius-terminal:split-left","rubinius-terminal:split-right","rubinius-terminal:split-top","rubinius-terminal:split-bottom"]},"repository":"https://github.com/rubinius/atom-rubinius-terminal","license":"MPL/2.0","engines":{"atom":">=0.179.0 <2.0.0"},"dependencies":{"atom-space-pen-views":"^2.0.3","debounce":"0.0.3","fs-plus":"^2.2.3","keypather":"^1.3.2"},"readme":"[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/rubinius/atom-rubinius-terminal)\n\n# Rubinius Terminal\n\nOpens a terminal tab within Atom that is configured to run Rubinius.\n\n## License\n\nRubinius Terminal is licensed under [Mozilla Public License, 2.0](https://www.mozilla.org/MPL/2.0/).\n\n## Thanks\n\nRubinius Terminal is heavily inspired by term2, term, and terminal. Thanks to the authors of those packages. The term.js library is used. The copyright notice for term.js is included in lib/vendor/term.js.\n","downloads":329,"stargazers_count":0},{"name":"terminalix","main":"./lib/atp","version":"4.5.0","description":"An advanced ATOM terminal interface. Fork of super-awesome atom package styczynski/atom-terminal-panel forked from thedaniel/terminal-panel","keywords":["plugin","atom-terminal","atom-package","atom-editor","fancy","atom-command","coffeescript","terminal"],"activationCommands":{"atom-workspace":"terminalix:toggle"},"repository":"https://github.com/VadimDor/terminalix","license":"MIT","engines":{"atom":">0.135.0"},"dependencies":{"ansi-html-stream":"0.0.3","atom-space-pen-views":"^2.0.3","jquery-autocomplete-js":"^1.0.6","iconv-lite":"^0.4.7","ps-tree":"^1.0.0"},"readme":"\n![Shields.io badge](https://img.shields.io/apm/v/atom-terminal-panel.svg?style=flat-square)\n![Shields.io badge](https://img.shields.io/apm/dm/atom-terminal-panel.svg?style=flat-square)\n![Shields.io badge](https://img.shields.io/apm/l/atom-terminal-panel.svg?style=flat-square)\n\nTerminalix \n==============\n\n(a fork of super-awesome atom package styczynski/atom-terminal-panel forked from thedaniel/terminal-panel)\nPlugin for ATOM Editor.\n\n## Short note\n\nThis project uses [jquery-autocomplete-js](http://isis97.github.io/autocomplete-js/) for autocompletion.\n\n## Development\n\nThis project is in alpha stage.\nPlease contribute this project if you liked it.\nAll the help is welcome.\nThank you.\n\n## Usage\nJust press `shift-enter` or just `` Ctrl + ` `` (control + backtick) and enjoy your cool ATOM terminal :D\nTry pressing the `ctrl` in the terminal for dynamic suggestions list!\n\n## Screenshot\n\nTerminal with fancy file links and interactive interface.\n\n![A screenshot of atom-terminal-panel package](https://raw.githubusercontent.com/isis97/atom-terminal-panel/master/static/example.gif)\n\nFancy custom highlighting rules.\n\n![A screenshot of atom-terminal-panel package](https://raw.githubusercontent.com/isis97/atom-terminal-panel/master/static/example3.gif)\n\nThere's also nice looking easy-to-use command finder dialog (just to search your custom commands and terminal build-ins):\n\n![A screenshot of atom-terminal-panel package](https://raw.githubusercontent.com/isis97/atom-terminal-panel/master/static/example_command_finder.png)\n\n\n## Feature\n\n* multiple terminal\n* colorful status icon\n* kill long live process\n* fancy ls (with custom extension colouring!)\n  * Do you wanna have a blue or a green executables? Do the yellow shell scripts look nice?\n* file and directory links (auto path detection)\n* interactive content (tooltips and on-click-actions)\n* highlighting rules (define your own highlight options - supports awesome stuff like regex matching, replacement and link creation)\n* nice looking slide animation on terminal open\n* navigate command history using arrow keys\n  * Just like in normal, native terminal.\n* search your favourite commands and built-ins\n  * Just type `?`, easy right?)\n* many useful special variables (like path to the currenly edited file)\n* customize your command prompt like never before using text formatting annotation and special variables!\n  * Do you want a current time, computer name or a cwd in your command prompt? There's no problem.\n* easily create custom commands!\n  * You don't have to play with dirty shell script files!\n* easily add new buttons to the terminal toolbar\n  * Now you can quickly access your command just by pressing one button\n* auto suggestions and commands descriptions for ease of use\n* modular commands system\n  * To add new commands just write your own /or download existing plugin!\n  * And copy it to the ./commands directory! - Easy, right?\n\nAnd a lot more! See it by yourself!\n\n## Plugins\n\nThis ATOM plugin is modular. You can create your own commands or download existing from the other users.\nThe release contains also the built-in plugins (for file system management etc.).\n\n## Terminal-commands.json\nThe `terminal-commands.json` is the main configuration file for this package. If it's not present (or the JSON syntax is invalid) a new config file is created (in folder .atom).\n\nThe config file contains:\n\n* custom commands definitions\n* rules (defininig highlights, regex replacement for text etc.)\n\nThe sample config file can look like:\n\n```json\n{\n  \"commands\": {\n    \"hello\": {\n      \"description\": \"Some description\",\n      \"command\": [\n        \"echo Hello world :D\",\n        \"echo This = %(*)\",\n        \"echo is\",\n        \"echo example usage\",\n        \"echo of the console\"\n      ]\n    }\n  },\n  \"toolbar\": [],\n  \"rules\": {\n    \"warning: (.*)\" : {\n      \"match\": {\n        \"matchLine\": \"true\"\n      },\n      \"css\": {\n        \"color\": \"yellow\"\n      }\n    }\n  }\n}\n```\n\nThe above configuration file will create highlight rule for all lines containing \"warning: \" text (this lines will be colored yellow).\n\n### Creating custom terminal shortcuts\n\nYou can create your own shortcuts buttons, which are placed on the terminal toolbar.\nTo do it just put a new entry in the `toolbar` property:\n```json\ntoolbar: [\n  [\"SHORTCUT NAME\", \"COMMAND TO BE EXECUTED\"]\n]\n```\n\nE.g. creating a button, which displays all avaliable terminal bultin commands:\n```json\ntoolbar: [\n  [ \"Display all commands\", \"memdump\" ]\n]\n```\n\nAnother example. Now the button will move the terminal to the C: directory:\n```json\ntoolbar: [\n  [\"C:\", \"cd C:\\\\\"]\n]\n```\n\nYou can add also tooltips describing the button functions:\n```json\ntoolbar: [\n  [\"C:\", \"cd C:\\\\\", \"Moves the terminal to the C:\\\\ directory.\"]\n]\n```\n\nAnd now creating custom actions:\n```json\n\"actions\": [\n\t[\n    \"test\",\n    \"hello_world\"\n  ]\n]\n```\nActions allows you to run your commands as atom commands or bind them to the specified keys.\nFrom the moment of the terminal initialization a new atom command is created - `atom-terminal-panel:test`,\nwhich will execute the `hello_world` command in the terminal.\n\nYou can now bind the command to the specified keys by editing your `keymap.cson`:\n```json\n'.workspace':\n  'alt-t': 'atom-terminal-panel:test'\n```\n\nEasy, right?\n\n### Defining custom commands\n\nEach command is defined in the `commands` entry the following way:\n\n```json\n\"name\": {\n  \"description\": \"Simple description shown in command view (activated by memdump or ?)\",\n  \"command\": [\"command0\", \"command1\", \"command2\"]\n}\n```\n'command0', 'command1'... are the commands that will be invoked by the user entry.\nExample involving `g++` usage:\n```json\n\"build\": {\n  \"description\": \"Build C/C++ application.\",\n  \"command\": [\n    \"echo Compiling %(file) using g++ Please wait...\",\n    \"g++ \\\"%(file)\\\" -o \\\"%(file).runnable\\\"\",\n    \"echo Compilation finished %(file).\"\n  ]\n}\n```\nAs you can see you are able to build the current C/C++ project using only a single command.\nYou may also try creating a build command accepting single file path (simple source file path) and\nthe auto_build command, which will execute build command with `%(file)` parameter.\nE.g.\n```json\n\"build\": {\n  \"description\": \"Build C/C++ application.\",\n  \"command\": [\n    \"echo Compiling %(0) using g++ Please wait...\",\n    \"g++ %(0) -o %(0).runnable\",\n    \"echo Compilation finished %(0).\"\n  ]\n},\n\"auto_build\": {\n  \"description\": \"Automatically build C/C++ application.\",\n  \"command\": [\n    \"build \\\"%(file)\\\"\"\n  ]\n}\n```\n\n### Defining custom rules\n\nThe highlight rules that are placed in `rules` property can be defined using two methods.\nThe simple way looks like:\n```json\n  \"regexp\" : {\n    \"css-property1\": \"css-value1\",\n    \"css-property2\": \"css-value2\",\n    \"css-property3\": \"css-value3\"\n  }\n```\n\nOr more complex (and also more powerful) way:\n```json\n  \"REGEXP\" : {\n    \"match\" : {\n      \"matchLine\": true,\n      \"replace\": \"REPLACEMENT\"\n    },\n    \"css\": {\n      \"color\": \"red\",\n      \"font-weight\": \"bold\"\n    }\n  }\n```\n\nThe REGEXP will be replaced with REPLACEMENT and all the line with matched token will be colored to red(matchLine:true).\n\nYou can also override default regular expression flags (default are: `gm`):\n\n```json\n\"match\": {\n  \"flags\": [ \"g\", \"i\" ]\n}\n```\n\nAnd specify how many lines under the match should be replaced:\n\n```json\n\"match\": {\n  \"matchLine\": true,\n  \"matchNextLines\": \"3\"\n}\n```\n\nThis rule will be applied to the entire line with the match and the next 3 lines (below it).\nNote that, the `matchNextLines` option can be used only with `matchLine` set to `true`, otherwise it's got no meaning.\n\n#### Getting more from custom patterns\n\nYou can event make your patterns to be applied to the html code.\nAdding the `forced` option to the `match`:\n```json\n\"match\": {\n  \"forced\": true\n}\n```\n\nFrom now your pattern will be applied to the html code, so it may seriously broke entire terminal output!\nThe forced patterns must be carefully designed to correctly manipulate the html code.\nIf you're a beginner you should do most things without using forced patterns.\n\n\n### More about regex rules\n\nYou can use the following properties in regex matches:\n\n* `matchLine` - bool value specifies if the regex should be applied to the whole line\n* `matchNextLines` - integer value specifies how many lines after the line containing current match should be also matched\n* `replace` - text that the match will be replaced with\n\n### Special annotation\n\nYou can use special annotation (on commands/rules definitions or in settings - command prompt message/current file path replacement) which is really powerful:\n\n* (R - can be used in the rules user definitions)\n* (T - can be directly typed to the terminal)\n* (A - can be used from the terminal API)\n\n| Property name | Usage context | Description |\n|----------------------------------------------------------------------------------------------------|---------------|-------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------|\n| `;;` | R/T/A | Divides the commands (commands divided by this will be executed separatly; one after another) |\n| `%(dynamic)` | R/T/A | Indicates that the value should be dynamically updated. Usage example: `echo %(raw) %(dynamic) <ANY CONTENT WITH VARIABLES>` |\n| `%(raw)` | R/T/A | Used to delay the variables expansion (the variables are expanded only at output - can be used with `echo` and `%(dynamic)` to create dynamic entries) |\n| `%(project.root)` | R/T/A | Refers to the first currently opened project directory |\n| `%(project.count)` | R/T/A | Refers to the number of the currently opened project directories |\n| `%(project:[index])` | R/T/A | Refers to the choosen currently opened project directory |\n| `%(username)` `%(user)` | R/T/A | Refers to the currently logged user |\n| `%(computer-name)` `%(hostname)` | R/T/A | Refers to the currently used computer's name |\n| `%(home)` | R/T/A | Refers to the current user home directory (experimental) |\n| `%(path)` `%(cwd)`  | R/T/A | Refers to the current working directory path |\n| `%(atom)` | R/T/A | Refers to the atom directory |\n| `%(file)` | R/T/A | Refers to the current file - same as %(editor.file) |\n| `%(editor.file)` | R/T/A | Refers to the file currently opened in the editor (full path) |\n| `%(editor.path)` | R/T/A | Refers to the file currently opened in the editor (parent folder path) |\n| `%(editor.name)` | R/T/A | Refers to the file currently opened in the editor (file name) |\n| `%(line)` | T | Refers to the input command number (used for prompt styling) |\n| `%(env.[property])` | R/T/A | Refers to the node.js environmental variables - To get the list of all available system properties use `%(env.*)` ([See node.js process_env](http://nodejs.org/api/process.html#process_process_env)) |\n| `%(env.*)` | T | Refers to the list of all available environmental (native) properties ([See node.js process_env](http://nodejs.org/api/process.html#process_process_env)) |\n| `%(command)` | R/T/A | Refers to the lastly used command |\n| `%(link) [path] %(endlink)` | R/T/A | Creates dynamic terminal file linkage with the given file path. |\n| `%(day)` | R/T/A | Refers to the current system time (2-digit day number) |\n| `%(month)` | R/T/A | Refers to the current system time (2-digit month number) |\n| `%(year)` | R/T/A | Refers to the current system time (4-digit year number) |\n| `%(hours)` | R/T/A | Refers to the current system time (2-digit 24-hour format number) |\n| `%(minutes)` | R/T/A | Refers to the current system time (2-digit minutes number) |\n| `%(seconds)` | R/T/A | Refers to the current system time (2-digit seconds number) |\n| `%(milis)` | R/T/A | Refers to the current system time (2-digit miliseconds number) |\n| `%(hours12)` | R/T/A | Refers to the current system time (2-digit 12-hour format number) |\n| `%(ampm)` `%(AMPM)` | R/T/A | Refers to the am/pm /or AM/PM text (for 12-hour formats) |\n| `%(.day)` `%(.month)` `%(.year)` `%(.hours)` `%(.minutes)` `%(.seconds)` `%(.milis)` `%(.hours12)` | R/T/A | Refers to the time variables, but always skips leading zeros |\n| `%(^[formatter])` | R/T/A | Text formatting modifiers. |\n| `%(disc)` | R/T/A | Refers to the current working directory (disc name) |\n| `%(path:[index])` | R/T/A | Refers to the current working directory (access path breadcrumbs) |\n| `%(tooltip:[displayed text]:content:[tooltip content])` | R/T/A | Creates interactive tooltip (displayed text and tooltip content cannot contain any special characters) |\n| `%(label:[type]:text:[text])` | R/T/A | Creates interactive label (the text cannot caontain any spacial character) - the label types are: error, danger, warning, info, default, badge) |\n| `%([index])` | A | Refers to the parameters passed to the invoked command. |\n| `%([index])` | R | Refers to the regular expression catching group (group 0 is entire match) |\n| `%(content)` | R | Refers to the entire match found by the regular expression. |\n| `%(*)` | A | Refers to the all passed parameters. |\n| `%(*^)` | A | Refers to the command string (all passed arguments with the command name at the beginning) |\n| `%(^)` | R/T/A | Text formatting annotation (means end of the earlier used text modifier - each used modifier should have its own formatting end) |\n| `%(^#[hex color])` | R/T/A | Text formatting annotation (sets the colour of the text) |\n| `%(^b)` `%(^bold)` | R/T/A | Text formatting annotation (makes the text bolded) |\n| `%(^i)` `%(^italic)` | R/T/A | Text formatting annotation (creates text in italics) |\n| `%(^u)` `%(^underline)` | R/T/A | Text formatting annotation (makes the text underlined) |\n| `%(^l)` or `%(^line-through)` | R/T/A | Text formatting annotation (creates line through the text) |\n\nA few words about indexing in variables.\nThe variable components are always indexed from 0, so `%(path:0)` refers to the first path component.\nYou can also reference last element of the path using negative values: `%(path:-1)` is last element, `%(path:-2)` the seconds last etc.\nThe same for referencing passed parameters - `%(INDEX)` and project directories - `%(project:INDEX)`.\n\n### Text formatting\n\nPlease use the `%(^...)` modifiers to format the text:\n\n* `%(^)` - ends the text formatting\n* `%(^#000000)` - colors the text with the hex color\n* `%(^b) or %(^bold)` - creates bold text\n* `%(^i) or %(^italic)` - creates text in italics\n* `%(^u) or %(^underline)` - creates underlined text\n* `%(^l) or %(^line-through)` - creates line trough the text\n\nExample usage:\n```\ndefault %(^i)italics%(^) %(^u)underline%(^) %(^b)%(^i)bold italics%(^)%(^) %(^#DAA520)colored%(^)\n```\n\n## Internally defined commands\n\nYou can take advantage of commands like `memdump` which prints information about all loaded commands (internal, not native!).\nHere the list of all commands:\n\n* `ls`\n* `new FILENAME` - creates new empty file in current working directory and opens it instantly in editor view\n* `edit FILENAME` - opens a given file in editor\n* `link FILENAME` - creates new file link (you can use it to open a file)\n* `rm FILENAME` - removes file in current working directory\n* `memdump` or `?` - prints information about all loaded commands\n* `clear` - clears console output\n* `cd` - moves to a given path\n* `update` - reloads plugin config (terminal-commands.json)\n* `reload` - reloads atom window\n\nIncluded example commands:\n\n* `compile` - compiles current file using g++\n* `run` - runs the previously compiled file\n* `test FILENAME` - runs the test on the compiled application FILENAME is a FILE0.in file and the compiled application name must be FILE.exe e.g. `test test5.in` means `test.exe < test5.in`\n\n### Internal configuration\n\nYou can modify the extensions.less file and add your own extension colouring rules.\nE.g:\n\n```less\n  .txt {\n    color: hsl(185, 0.5, 0.5);\n    font-weight: bold;\n  }\n  .js {\n    color: red;\n  }\n```\n\nSimple like making a cup of fresh coffee...\nJust dot, extension name and CSS formatting.\n\nThe ./config/terminal-style.less contains the general terminal stylesheet:\nE.g.\n``` less\nbackground-color: rgb(12, 12, 12);\ncolor: red;\nfont-weight: bold;\n```\nYou can modify it to make the terminal look cooler.\n\n### Creating more advanced custom functions (plugins)\n\nThe ./commands directory contains the plugins (you can add your own commands).\nEach plugin exports a list of all custom commands (each plugin directory must contain `index.coffee` file - its entry point, which looks like described below)\nE.g.\n```coffeescript\nmodule.exports =\n  \"hello_world\":\n    \"description\": \"Prints hello world message to the screen.\"\n    \"command\": (state, args)->\n      return \"Hello world\"\n```\nThe state is the terminal view object and the args - the array of all passesd parameters.\nYour custom functional command can also create console links using ```state.consoleLink path```, labels using ```state.consoleLabel type, text``` or execute other commands:\nE.g.\n```coffeescript\n\"call_another\":\n  \"description\": \"This example shows how to call another command.\"\n  \"command\": (state, args)->\n    return state.exec \"echo Hello world\", state, args\n```\nBut if you're using ```state.exec``` you must remember about passing not only command string but also `state` and `args` parameters (array of refernced parameters).\nThe array of the referenced parameters contains all parameters which will be referenced by a command string (element at zero index in array will be used for %(0) replacement). If the command string do not reference its parameters you can pass only a null value.\nAs you can see all terminal messages are displayed automatically (just return the string message). but you can also print them manually:\n``` coffeescript\n\"hello_world\":\n  \"description\": \"Hello world example with two messages.\"\n  \"command\": (state, args)->\n    state.message 'Hello world'\n    return 'Second string hue hue :)'\n```\n\nYou can specify the command description, example usage and if the plugin command is outdated - make it deprecated:\n``` coffeescript\n\"hello_world\":\n  \"deprecated\": true\n  \"example\": \"hello_world\"\n  \"params\": \"[NONE]\"\n  \"description\": \"Hello world example with two messages.\"\n  \"command\": (state, args)->\n    state.message 'Hello world'\n    return 'Second string hue hue :)'\n```\n\nYou can also export new variables:\n```coffeescript\n\"name\":\n  \"description\": \"My own variable!\"\n  \"variable\": (state) -> return \"LOL\"\n```\nIn the given example the variable can be acessed by typing `%(name)`.\n\n## More about console\n\nAs you can see in previous examples we were calling `state.exec`.\nThis method accepts tree parametes:\n`command`, `args_reference`, `state`\n`command` is the string command to be executed e.g. `echo test` or `format C:`\n`args_reference` is the array containing all reference arguments e.g. if you passes a ['arg0', 'arg1'] as parameter the `%(0)` sequence will be replaced with `arg0` text and `%(1)` with `arg1`. If this paramter is undefined or null the command is executed normally and the `%(0)` sequences are simply removed.\n`state` - the console view object e.g. `state.exec 'echo test > test.txt', null, state`\n\nYou can also call other useful console methods:\n* `state.message 'MESSAGE'` - displays a message (can contains css/html formatting)\n* `state.rawMessage 'MESSAGE'` - displays a message without parsing special sequences like `%(link)...%(endlink)` or `%(cwd)` etc.\n* `state.clear` - clears console output\n* `state.consoleLink 'FILENAME'` - creates console link to a given file (returns text which will be replaced with interactive file link)\n* `state.consoleLabel 'TYPE', 'TEXT'` - creates console label just like `%(label:TYPE:text:TEXT)`\n\n## Hotkeys\n\n* `shift-enter` toggle current terminal\n* `command-shift-t` new terminal\n* `command-shift-j` next terminal\n* `command-shift-k` prev terminal\n* `` ` `` - toggle terminal\n* `escape` (in focused input box) - close terminal\n\n## TODO\n\n* Make a more cool terminal cursor.\n* More interactive stuff\n* Maybe a little bash parser written in javascript?\n* Some about stdinput (which is currently really bad)\n\n## Example configuration\n\nHere it is, the example configuration (terminal-commands.json) - that you can see on the preview images.\nTo use it just copy it to your ./atom/terminal-commands.json file (if the file doesn't exist call `update` command and it should be created).\n\nThe regex rules preview can be easily checked by invoking `echo` command (e.g. `echo warn test warning messages.`).\n\nNote that after each config update you must call `update` command otherwise changes will take no effects.\n\n```json\n{\n\t\"_comment\": \"Package atom-terminal-panel: This terminal-commands.json file was automatically generated by atom-terminal-package. It contains all useful config data.\",\n\t\"commands\": {\n\t\t\"hello_world\": {\n\t\t\t\"description\": \"Prints the hello world message to the terminal output.\",\n\t\t\t\"command\": [\n\t\t\t\t\"echo Hello world :D\",\n\t\t\t\t\"echo This is\",\n\t\t\t\t\"echo example usage\",\n\t\t\t\t\"echo of the console\",\n\t\t\t\t\"echo arg[0] = %(0)\",\n\t\t\t\t\"echo arg[1] = %(1)\"\n\t\t\t]\n\t\t}\n\t},\n\t\"actions\": [\n\t\t[\"test\", \"hello_world\"]\n\t],\n\t\"toolbar\": [\n\t\t[\n\t\t\t\"foo\",\n\t\t\t\"bar\",\n\t\t\t\"Ecce est foo-bar exemplum!\"\n\t\t],\n\t\t[\n\t\t\t\"clear\",\n\t\t\t\"clear\",\n\t\t\t\"Clears the console output.\"\n\t\t],\n\t\t[\n\t\t\t\"info\",\n\t\t\t\"info\",\n\t\t\t\"Prints the terminal welcome message.\"\n\t\t],\n\t\t[\n\t\t\t\"all available commands\",\n\t\t\t\"memdump\",\n\t\t\t\"Displays all available builtin commands. (all commands except native)\"\n\t\t]\n\t],\n\t\"rules\": {\n\t\t\"\\\\b[A-Z][A-Z]+\\\\b\": {\n\t\t\t\"match\": {\n\t\t\t\t\"flags\": [\n\t\t\t\t\t\"g\"\n\t\t\t\t]\n\t\t\t},\n\t\t\t\"css\": {\n\t\t\t\t\"color\": \"gray\"\n\t\t\t}\n\t\t},\n\t\t\"(error|err):? (.*)\": {\n\t\t\t\"match\": {\n\t\t\t\t\"matchLine\": true,\n\t\t\t\t\"replace\": \"%(label:error:text:Error) %(0)\"\n\t\t\t},\n\t\t\t\"css\": {\n\t\t\t\t\"color\": \"red\",\n\t\t\t\t\"font-weight\": \"bold\"\n\t\t\t}\n\t\t},\n\t\t\"(warning|warn|alert):? (.*)\": {\n\t\t\t\"match\": {\n\t\t\t\t\"matchLine\": true,\n\t\t\t\t\"replace\": \"%(label:warning:text:Warning) %(0)\"\n\t\t\t},\n\t\t\t\"css\": {\n\t\t\t\t\"color\": \"yellow\"\n\t\t\t}\n\t\t},\n\t\t\"(note|info):? (.*)\": {\n\t\t\t\"match\": {\n\t\t\t\t\"matchLine\": true,\n\t\t\t\t\"replace\": \"%(label:info:text:Info) %(0)\"\n\t\t\t},\n\t\t\t\"css\": {}\n\t\t},\n\t\t\"(debug|dbg):? (.*)\": {\n\t\t\t\"match\": {\n\t\t\t\t\"matchLine\": true,\n\t\t\t\t\"replace\": \"%(label:default:text:Debug) %(0)\"\n\t\t\t},\n\t\t\t\"css\": {\n\t\t\t\t\"color\": \"gray\"\n\t\t\t}\n\t\t}\n\t}\n}\n```\n\n## Experiments\n\nThis package is in alpha development phase. You can enable experimental features, which may be added to the software in incoming releases.\n","downloads":268,"stargazers_count":0},{"name":"tmux-terminal","main":"./lib/tmux-terminal","version":"0.0.1","description":"A short description of your package","activationCommands":{"atom-workspace":["tmux-terminal:send-window-contents","tmux-terminal:send-selection","tmux-terminal:send-custom-command","tmux-terminal:send-custom-command-with-position","tmux-terminal:send-break","tmux-terminal:send-redo"]},"repository":"https://github.com/mauricioszabo/atom-tmux-terminal","license":"MIT","engines":{"atom":">=0.174.0 <2.0.0"},"dependencies":{},"readme":"# tmux-terminal package\n\nA short description of your package.\n\n![A screenshot of your package](https://f.cloud.github.com/assets/69169/2290250/c35d867a-a017-11e3-86be-cd7c5bf3ff9b.gif)\n","downloads":68,"stargazers_count":0},{"name":"atom-terminal-powershell","main":"./lib/atom-terminal-powershell","version":"1.1.0","description":"Open powershell terminal in the current file's directory.","activationCommands":{"atom-workspace":["atom-terminal-powershell:open","atom-terminal-powershell:open-project-root"]},"repository":"https://github.com/superkaitokid/atom-terminal-powershell","license":"MIT","engines":{"atom":">0.50.0"},"dependencies":{},"readme":"# atom-terminal-powershell\n\n## Difference from Atom-Terminal\nCustom edit to atom-terminal plugin to support powershell out of the box.\nProvides the same properties as the original plugin except defaults to Powershell.\n\nOriginal package can be found here: [https://github.com/karan/atom-terminal](https://github.com/karan/atom-terminal)\n\n![Default Powershell Option](https://raw.github.com/superkaitokid/atom-terminal-powershell/master/default.png)\n\n## Usage\nIf using Powershell, supply a Powershell executable and check the Is Powershell option.\n\nIf using other terminals, uncheck Is Powershell option and follow normal atom-terminal usage.\n\n![Is PowerShell Option](https://raw.github.com/superkaitokid/atom-terminal-powershell/master/isPowerShell.png)\n\n## Original Atom-Terminal Instructions\n\nOpen terminal on current file's directory with `ctrl-shift-t`.\n\nOpen a terminal in the project's root directory with `alt-shift-t`.\n\nKeybindings: `ctrl-shift-t`, `alt-shift-t`\n\nInstall: `apm install atom-terminal-powershell`\n\nConfig:\n```coffeescript\n\"atom-terminal\":\n    # only necessary if standard config doesn't find terminal app\n    app: \"/path/to/your/favorite/terminal\"\n    args: \"--useThisOptionWhenLaunchingTerminal\"\n```\n\n![atom-terminal](https://raw.github.com/karan/atom-terminal/master/terminal.gif)\n","downloads":5944,"stargazers_count":2},{"name":"atom-rubinius-terminal","main":"./lib/rubinius-terminal","version":"0.0.3","description":"Opens a terminal tab within Atom that is configured to run Rubinius","activationCommands":{"atom-workspace":["atom-rubinius-terminal:open","atom-rubinius-terminal:split-left","atom-rubinius-terminal:split-right","atom-rubinius-terminal:split-up","atom-rubinius-terminal:split-down"]},"repository":"https://github.com/rubinius/atom-rubinius-terminal","license":"MPL/2.0","engines":{"atom":">=0.182.0 <2.0.0"},"dependencies":{"atom-space-pen-views":"^2.0.3","debounce":"0.0.3","fs-plus":"^2.2.3","keypather":"^1.3.2"},"readme":"[![Gitter](https://badges.gitter.im/Join%20Chat.svg)](https://gitter.im/rubinius/atom-rubinius-terminal)\n\n# Rubinius Terminal\n\nOpens a terminal tab or pane within Atom that is configured to run Rubinius.\n\nThe main objective is to provide the simplest way to try Rubinius by providing direct access to an isolated install of Rubinius that does not interfere with a system Ruby or another Ruby switcher.\n\nAnother objective is creating better integration between the terminal and the editor without re-implementing terminal features in the editor or editor features in the terminal.\n\n**Note: this project is alpha-stage. It is being developed on OS X first, but will eventually support Linux and Windows as well. For outstanding work, see the [issues](https://github.com/rubinius/atom-rubinius-terminal/issues).**\n\nThe Rubinius Terminal installs a binary build of Rubinius. When a terminal tab or pane is opened, the shell instance is configured so that Rubinius is the active Ruby.\n\n## License\n\nRubinius Terminal is licensed under [Mozilla Public License, 2.0](https://www.mozilla.org/MPL/2.0/).\n\n## Thanks\n\nRubinius Terminal is heavily inspired by term2, term, and terminal. Thanks to the authors of those packages. The term.js library is used. The copyright notice for term.js is included in lib/vendor/term.js.\n","downloads":212,"stargazers_count":0},{"name":"run-test-in-terminal","main":"./lib/run-test-in-terminal","version":"0.1.0","description":"A short description of your package","keywords":[],"activationHooks":["core:loaded-shell-environment"],"activationCommands":{"atom-workspace":"run-test-in-terminal:run-test"},"repository":"https://github.com/DevBuilders/atom-run-test-in-terminal","license":"MIT","engines":{"atom":">=1.0.0 <2.0.0"},"dependencies":{},"consumedServices":{"runInTerminal":{"versions":{"^0.14.5":"consumeRunInTerminal"}}},"readme":"# run-test-in-terminal package\n\nRuns the test currently open in the active editor in a terminal view. Test Runner defaults to rspec.\nDepends on [platformio-ide-terminal](https://atom.io/packages/platformio-ide-terminal).\n","downloads":107,"stargazers_count":0}]
